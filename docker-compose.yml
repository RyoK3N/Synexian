version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: synexian-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: synexian
      POSTGRES_USER: synexian
      POSTGRES_PASSWORD: synexian_secure_password_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - synexian-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U synexian -d synexian"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: synexian-redis
    restart: unless-stopped
    command: redis-server --requirepass synexian_redis_password_2024
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - synexian-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: synexian-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://synexian:synexian_secure_password_2024@postgres:5432/synexian
      REDIS_URL: redis://:synexian_redis_password_2024@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production-$(openssl rand -hex 32)}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:5000}
      # Security headers
      HELMET_CSP_ENABLED: "true"
      TRUST_PROXY: "true"
    ports:
      - "5000:5000"
    networks:
      - synexian-network
    volumes:
      - app_logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { host: 'localhost', port: 5000, path: '/api/health', timeout: 2000 }; const req = http.request(options, (res) => { if (res.statusCode === 200) process.exit(0); else process.exit(1); }); req.on('error', () => process.exit(1)); req.end();"]
      interval: 30s
      timeout: 10s
      start_period: 40s
      retries: 3

  # Nginx Reverse Proxy (Optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: synexian-nginx
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_logs:/var/log/nginx
    networks:
      - synexian-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  synexian-network:
    driver: bridge
    name: synexian-network

volumes:
  postgres_data:
    name: synexian-postgres-data
  redis_data:
    name: synexian-redis-data
  app_logs:
    name: synexian-app-logs
  nginx_logs:
    name: synexian-nginx-logs