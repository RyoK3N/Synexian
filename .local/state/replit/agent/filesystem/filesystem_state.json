{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Synexian Labs - AI-Powered Business Solutions Platform\n\n## Overview\n\nThis is a full-stack web application for Synexian Labs, an AI and automation consulting company. The platform combines a modern React frontend with an Express.js backend, featuring user authentication, contact management, analytics tracking, and an admin dashboard.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite for fast development and optimized production builds\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Framework**: Shadcn/ui components with Radix UI primitives\n- **Styling**: Tailwind CSS with custom design system\n- **State Management**: TanStack Query for server state management\n- **Form Handling**: React Hook Form with Zod validation\n- **Animations**: Framer Motion for smooth transitions and interactions\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Drizzle ORM\n- **Authentication**: JWT-based authentication with bcrypt password hashing\n- **Security**: Rate limiting, CORS protection, Helmet security headers\n- **Session Management**: Express sessions with PostgreSQL store\n\n### Database Architecture\n- **ORM**: Drizzle with Neon serverless PostgreSQL\n- **Schema**: Centralized schema definition in `/shared/schema.ts`\n- **Tables**: Users, contact submissions, activity logs, analytics\n- **Migrations**: Managed through Drizzle Kit\n\n## Key Components\n\n### Authentication System\n- JWT-based authentication with secure token storage\n- Password hashing using bcrypt with 12 salt rounds\n- Rate limiting on authentication endpoints (5 attempts per 15 minutes)\n- Two-factor authentication support (schema ready)\n- Admin-only access to dashboard features\n\n### Contact Management\n- Public contact form with validation\n- Rate limiting (3 submissions per minute)\n- Admin dashboard for managing submissions\n- Status tracking (new, read, responded)\n- Email and company information capture\n\n### Analytics & Tracking\n- Page view tracking with IP and user agent logging\n- Activity logging for user interactions\n- Daily analytics aggregation\n- Dashboard statistics and reporting\n- Session tracking with unique identifiers\n\n### Admin Dashboard\n- Protected admin interface\n- Real-time analytics and metrics\n- Contact submission management\n- Activity log monitoring\n- User authentication status tracking\n\n### UI Components\n- Comprehensive Shadcn/ui component library\n- Custom design system with brand colors\n- Responsive design patterns\n- Accessibility-focused implementations\n- Dark mode support (theme system ready)\n\n## Data Flow\n\n### User Interaction Flow\n1. **Public Website**: Users browse services and company information\n2. **Contact Form**: Visitors submit inquiries through validated forms\n3. **Analytics Tracking**: Page views and interactions are logged automatically\n4. **Admin Access**: Administrators log in to manage submissions and view analytics\n\n### Data Processing Pipeline\n1. **Frontend Validation**: Zod schemas validate all form inputs\n2. **API Requests**: TanStack Query manages server communication\n3. **Backend Validation**: Express middleware validates and sanitizes data\n4. **Database Operations**: Drizzle ORM handles all database interactions\n5. **Response Handling**: Structured JSON responses with error handling\n\n### Security Layer\n1. **Input Validation**: Multiple validation layers prevent malicious input\n2. **Rate Limiting**: Protects against abuse and spam\n3. **Authentication**: JWT tokens secure admin endpoints\n4. **Session Management**: Secure session handling with PostgreSQL storage\n5. **CORS Protection**: Configured for specific domain access\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React Ecosystem**: React 18, React DOM, React Hook Form\n- **TypeScript**: Full TypeScript implementation across frontend and backend\n- **Vite**: Modern build tooling with hot module replacement\n- **Express.js**: Web server framework with middleware support\n\n### Database & ORM\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Drizzle ORM**: Type-safe database operations\n- **Connection Pooling**: Efficient database connection management\n\n### UI & Styling\n- **Tailwind CSS**: Utility-first CSS framework\n- **Radix UI**: Accessible component primitives\n- **Framer Motion**: Animation library for smooth interactions\n- **Lucide React**: Consistent icon system\n\n### Security & Authentication\n- **bcrypt**: Password hashing and security\n- **jsonwebtoken**: JWT token generation and validation\n- **express-rate-limit**: API rate limiting\n- **helmet**: Security headers middleware\n- **cors**: Cross-origin resource sharing configuration\n\n### Development Tools\n- **Replit Integration**: Development environment optimization\n- **PostCSS**: CSS processing and optimization\n- **ESBuild**: Fast JavaScript bundling for production\n\n## Deployment Strategy\n\n### Development Environment\n- **Local Development**: Vite dev server with hot reload\n- **Database**: Neon serverless PostgreSQL instance\n- **Environment Variables**: Secure configuration management\n- **Error Handling**: Development error overlays and logging\n\n### Production Build Process\n1. **Frontend Build**: Vite builds optimized static assets\n2. **Backend Build**: ESBuild bundles server code\n3. **Asset Management**: Static files served from `/dist/public`\n4. **Environment Configuration**: Production environment variables\n\n### Database Management\n- **Schema Migrations**: Drizzle Kit handles database schema changes\n- **Connection Pooling**: Neon's built-in connection management\n- **Backup Strategy**: Managed by Neon's infrastructure\n- **Performance Monitoring**: Built-in query logging and analytics\n\n### Security Considerations\n- **HTTPS Enforcement**: SSL/TLS encryption in production\n- **JWT Secret**: Secure token signing with environment variables\n- **Rate Limiting**: Production-ready abuse prevention\n- **Input Sanitization**: Multiple layers of data validation\n- **Session Security**: Secure cookie configuration for production","size_bytes":6179},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport rateLimit from \"express-rate-limit\";\nimport helmet from \"helmet\";\nimport cors from \"cors\";\nimport { \n  insertContactSubmissionSchema, \n  insertActivityLogSchema, \n  loginSchema,\n  insertUserSchema \n} from \"@shared/schema\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-super-secret-jwt-key-change-in-production\";\nconst SALT_ROUNDS = 12;\n\n// Rate limiting\nconst authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // limit each IP to 5 requests per windowMs\n  message: { message: \"Too many authentication attempts, please try again later\" },\n});\n\nconst contactLimiter = rateLimit({\n  windowMs: 60 * 1000, // 1 minute\n  max: 3, // limit each IP to 3 contact form submissions per minute\n  message: { message: \"Too many contact form submissions, please try again later\" },\n});\n\n// Extend Express Request interface to include user property\ndeclare module 'express-serve-static-core' {\n  interface Request {\n    user?: {\n      userId: number;\n      username: string;\n      role: string;\n    };\n  }\n}\n\n// Middleware to verify JWT token\nconst authenticateToken = (req: any, res: any, next: any) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.startsWith('Bearer ') \n    ? authHeader.slice(7) \n    : authHeader;\n\n  if (!token) {\n    console.log('No token provided:', { authHeader, headers: req.headers });\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  try {\n    jwt.verify(token, JWT_SECRET, (err: any, decoded: any) => {\n      if (err) {\n        console.log('JWT verification error:', err.message);\n        return res.status(403).json({ message: 'Invalid or expired token' });\n      }\n      \n      req.user = decoded;\n      next();\n    });\n  } catch (error) {\n    console.log('Token verification error:', error);\n    return res.status(403).json({ message: 'Invalid token format' });\n  }\n};\n\n// Helper function to log activity\nconst logActivity = async (type: string, description: string, req: any, userId?: number) => {\n  try {\n    await storage.logActivity({\n      type,\n      description,\n      userId,\n      ipAddress: req.ip,\n      userAgent: req.get('user-agent') || '',\n      sessionId: req.sessionID || '',\n      metadata: {\n        url: req.originalUrl,\n        method: req.method,\n      },\n    });\n  } catch (error) {\n    console.error('Failed to log activity:', error);\n  }\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Configure trust proxy for rate limiting\n  app.set('trust proxy', 1);\n  \n  // Security middleware with CSP configuration\n  app.use(helmet({\n    contentSecurityPolicy: {\n      directives: {\n        defaultSrc: [\"'self'\"],\n        scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"'unsafe-eval'\", \"https://assets.calendly.com\", \"https://js.stripe.com\", \"https://js.braintreegateway.com\"],\n        styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\"],\n        fontSrc: [\"'self'\", \"https://fonts.gstatic.com\"],\n        imgSrc: [\"'self'\", \"data:\", \"https:\", \"blob:\"],\n        connectSrc: [\"'self'\", \"https://api.calendly.com\", \"wss://\", \"ws://\"],\n        frameSrc: [\"'self'\", \"https://calendly.com\"],\n        objectSrc: [\"'none'\"],\n        upgradeInsecureRequests: process.env.NODE_ENV === 'production' ? [] : null,\n      },\n    },\n  }));\n  \n  app.use(cors({\n    origin: process.env.NODE_ENV === 'production' \n      ? process.env.FRONTEND_URL || false \n      : true,\n    credentials: true,\n  }));\n\n  // Initialize admin user if not exists\n  const initializeAdminUser = async () => {\n    try {\n      const existingAdmin = await storage.getUserByUsername('admin');\n      if (!existingAdmin) {\n        const hashedPassword = await bcrypt.hash('admin123!@#', SALT_ROUNDS);\n        await storage.createUser({\n          username: 'admin',\n          email: 'admin@synexianlabs.com',\n          password: hashedPassword,\n          role: 'admin',\n        });\n        console.log('Default admin user created - Username: admin, Password: admin123!@#');\n      }\n    } catch (error) {\n      console.error('Failed to initialize admin user:', error);\n    }\n  };\n\n  await initializeAdminUser();\n\n  // Contact form submission\n  app.post('/api/contact', contactLimiter, async (req, res) => {\n    try {\n      const validatedData = insertContactSubmissionSchema.parse(req.body);\n      \n      const submission = await storage.createContactSubmission(validatedData);\n      \n      // Log activity\n      await logActivity(\n        'contact_form_submission',\n        `New contact form submission from ${validatedData.email}`,\n        req\n      );\n\n      // Update daily analytics\n      const today = new Date().toISOString().split('T')[0];\n      await storage.updateDailyAnalytics(today, { conversions: 1 });\n\n      res.status(201).json({ \n        message: 'Contact form submitted successfully',\n        id: submission.id \n      });\n    } catch (error) {\n      console.error('Contact form submission error:', error);\n      res.status(400).json({ \n        message: 'Invalid form data', \n        error: error instanceof Error ? error.message : 'Unknown error' \n      });\n    }\n  });\n\n  // Admin login\n  app.post('/api/admin/login', authLimiter, async (req, res) => {\n    try {\n      const { username, password, twoFactor } = loginSchema.parse(req.body);\n      \n      const user = await storage.getUserByUsername(username);\n      if (!user || user.role !== 'admin') {\n        await logActivity('failed_login', `Failed login attempt for username: ${username}`, req);\n        return res.status(401).json({ message: 'Invalid credentials' });\n      }\n\n      const passwordValid = await bcrypt.compare(password, user.password);\n      if (!passwordValid) {\n        await logActivity('failed_login', `Failed login attempt for username: ${username}`, req);\n        return res.status(401).json({ message: 'Invalid credentials' });\n      }\n\n      // For now, skip 2FA validation (would implement with speakeasy in production)\n      if (user.twoFactorEnabled && (!twoFactor || twoFactor !== '123456')) {\n        return res.status(401).json({ message: 'Invalid 2FA code' });\n      }\n\n      // Update last login\n      await storage.updateUserLastLogin(user.id);\n\n      // Generate JWT token\n      const token = jwt.sign(\n        { userId: user.id, username: user.username, role: user.role },\n        JWT_SECRET,\n        { expiresIn: '24h' }\n      );\n\n      await logActivity('successful_login', `Admin login successful for ${username}`, req, user.id);\n\n      res.json({\n        message: 'Login successful',\n        token,\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          role: user.role,\n        }\n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(400).json({ \n        message: 'Invalid login data',\n        error: error instanceof Error ? error.message : 'Unknown error' \n      });\n    }\n  });\n\n  // Verify JWT token endpoint\n  app.get('/api/admin/verify', authenticateToken, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.user!.userId);\n      \n      if (!user) {\n        return res.status(401).json({ valid: false, message: 'User not found' });\n      }\n\n      res.json({\n        valid: true,\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          role: user.role,\n        },\n      });\n    } catch (error) {\n      console.error('Token verification error:', error);\n      res.status(500).json({ valid: false, message: 'Server error during verification' });\n    }\n  });\n\n  // Get dashboard analytics (admin only)\n  app.get('/api/admin/analytics', authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const stats = await storage.getDashboardStats();\n      \n      res.json({\n        visitors: stats.totalVisitors,\n        conversions: stats.totalConversions,\n        revenue: stats.totalRevenue,\n        activeUsers: stats.activeUsers,\n        recentActivity: stats.recentActivity.map(activity => ({\n          id: activity.id,\n          type: activity.type,\n          description: activity.description,\n          createdAt: activity.createdAt,\n          userId: activity.userId,\n        })),\n      });\n    } catch (error) {\n      console.error('Analytics error:', error);\n      res.status(500).json({ message: 'Failed to fetch analytics' });\n    }\n  });\n\n  // Get contact submissions (admin only)\n  app.get('/api/admin/contacts', authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const limit = parseInt(req.query.limit as string) || 50;\n      const submissions = await storage.getContactSubmissions(limit);\n      \n      res.json({ contacts: submissions });\n    } catch (error) {\n      console.error('Contacts fetch error:', error);\n      res.status(500).json({ message: 'Failed to fetch contacts' });\n    }\n  });\n\n  // Update contact submission status (admin only)\n  app.patch('/api/admin/contacts/:id', authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const { id } = req.params;\n      const { status } = req.body;\n\n      if (!['new', 'read', 'responded'].includes(status)) {\n        return res.status(400).json({ message: 'Invalid status' });\n      }\n\n      await storage.updateContactSubmissionStatus(parseInt(id), status);\n      \n      await logActivity(\n        'contact_status_update',\n        `Contact submission ${id} status updated to ${status}`,\n        req,\n        req.user.userId\n      );\n\n      res.json({ message: 'Contact status updated successfully' });\n    } catch (error) {\n      console.error('Contact update error:', error);\n      res.status(500).json({ message: 'Failed to update contact status' });\n    }\n  });\n\n  // Track page views\n  app.post('/api/track/pageview', async (req, res) => {\n    try {\n      const { page } = req.body;\n      \n      await logActivity('page_view', `Page view: ${page}`, req);\n      \n      // Update daily analytics\n      const today = new Date().toISOString().split('T')[0];\n      await storage.updateDailyAnalytics(today, { \n        pageViews: 1,\n        uniqueVisitors: 1 // In production, would track unique sessions\n      });\n\n      res.json({ message: 'Page view tracked' });\n    } catch (error) {\n      console.error('Page view tracking error:', error);\n      res.status(500).json({ message: 'Failed to track page view' });\n    }\n  });\n\n  // Verify token endpoint\n  app.get('/api/admin/verify', authenticateToken, async (req, res) => {\n    try {\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const user = await storage.getUser(req.user.userId);\n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      res.json({\n        valid: true,\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          role: user.role,\n        }\n      });\n    } catch (error) {\n      console.error('Token verification error:', error);\n      res.status(500).json({ message: 'Token verification failed' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":11700},"server/storage.ts":{"content":"import { \n  users, \n  contactSubmissions, \n  activityLog, \n  analytics,\n  type User, \n  type InsertUser,\n  type ContactSubmission,\n  type InsertContactSubmission,\n  type ActivityLog,\n  type InsertActivityLog,\n  type Analytics\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, sql, and, gte } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User management\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserLastLogin(id: number): Promise<void>;\n  \n  // Contact submissions\n  createContactSubmission(submission: InsertContactSubmission): Promise<ContactSubmission>;\n  getContactSubmissions(limit?: number): Promise<ContactSubmission[]>;\n  updateContactSubmissionStatus(id: number, status: string): Promise<void>;\n  \n  // Activity logging\n  logActivity(activity: InsertActivityLog): Promise<ActivityLog>;\n  getRecentActivity(limit?: number): Promise<ActivityLog[]>;\n  \n  // Analytics\n  getAnalytics(startDate?: string, endDate?: string): Promise<Analytics[]>;\n  updateDailyAnalytics(date: string, updates: Partial<Analytics>): Promise<void>;\n  getDashboardStats(): Promise<{\n    totalVisitors: number;\n    totalConversions: number;\n    totalRevenue: number;\n    activeUsers: number;\n    recentActivity: ActivityLog[];\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUserLastLogin(id: number): Promise<void> {\n    await db\n      .update(users)\n      .set({ lastLoginAt: new Date() })\n      .where(eq(users.id, id));\n  }\n\n  async createContactSubmission(submission: InsertContactSubmission): Promise<ContactSubmission> {\n    const [contact] = await db\n      .insert(contactSubmissions)\n      .values(submission)\n      .returning();\n    return contact;\n  }\n\n  async getContactSubmissions(limit = 50): Promise<ContactSubmission[]> {\n    return await db\n      .select()\n      .from(contactSubmissions)\n      .orderBy(desc(contactSubmissions.createdAt))\n      .limit(limit);\n  }\n\n  async updateContactSubmissionStatus(id: number, status: string): Promise<void> {\n    await db\n      .update(contactSubmissions)\n      .set({ status })\n      .where(eq(contactSubmissions.id, id));\n  }\n\n  async logActivity(activity: InsertActivityLog): Promise<ActivityLog> {\n    const [log] = await db\n      .insert(activityLog)\n      .values(activity)\n      .returning();\n    return log;\n  }\n\n  async getRecentActivity(limit = 20): Promise<ActivityLog[]> {\n    return await db\n      .select()\n      .from(activityLog)\n      .orderBy(desc(activityLog.createdAt))\n      .limit(limit);\n  }\n\n  async getAnalytics(startDate?: string, endDate?: string): Promise<Analytics[]> {\n    if (startDate && endDate) {\n      return await db\n        .select()\n        .from(analytics)\n        .where(\n          and(\n            gte(analytics.date, startDate),\n            sql`${analytics.date} <= ${endDate}`\n          )\n        )\n        .orderBy(desc(analytics.date));\n    }\n    \n    return await db\n      .select()\n      .from(analytics)\n      .orderBy(desc(analytics.date));\n  }\n\n  async updateDailyAnalytics(date: string, updates: Partial<Analytics>): Promise<void> {\n    const existing = await db\n      .select()\n      .from(analytics)\n      .where(eq(analytics.date, date))\n      .limit(1);\n\n    if (existing.length > 0) {\n      await db\n        .update(analytics)\n        .set({ ...updates, updatedAt: new Date() })\n        .where(eq(analytics.date, date));\n    } else {\n      await db\n        .insert(analytics)\n        .values({ date, ...updates });\n    }\n  }\n\n  async getDashboardStats() {\n    // Get total visitors (sum of unique visitors from analytics)\n    const [visitorsResult] = await db\n      .select({ total: sql<number>`COALESCE(SUM(${analytics.uniqueVisitors}), 0)` })\n      .from(analytics);\n\n    // Get total conversions\n    const [conversionsResult] = await db\n      .select({ total: sql<number>`COALESCE(SUM(${analytics.conversions}), 0)` })\n      .from(analytics);\n\n    // Mock revenue calculation (conversions * average deal value)\n    const totalRevenue = (conversionsResult?.total || 0) * 150; // $150 average\n\n    // Get active users (unique visitors in last 30 days)\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    const [activeUsersResult] = await db\n      .select({ total: sql<number>`COALESCE(SUM(${analytics.uniqueVisitors}), 0)` })\n      .from(analytics)\n      .where(gte(analytics.date, thirtyDaysAgo.toISOString().split('T')[0]));\n\n    // Get recent activity\n    const recentActivity = await this.getRecentActivity(10);\n\n    return {\n      totalVisitors: visitorsResult?.total || 0,\n      totalConversions: conversionsResult?.total || 0,\n      totalRevenue,\n      activeUsers: activeUsersResult?.total || 0,\n      recentActivity,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":5450},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, json } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  role: text(\"role\").notNull().default(\"admin\"),\n  twoFactorEnabled: boolean(\"two_factor_enabled\").default(false),\n  twoFactorSecret: text(\"two_factor_secret\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  lastLoginAt: timestamp(\"last_login_at\"),\n});\n\nexport const contactSubmissions = pgTable(\"contact_submissions\", {\n  id: serial(\"id\").primaryKey(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  company: text(\"company\"),\n  message: text(\"message\").notNull(),\n  status: text(\"status\").notNull().default(\"new\"), // new, read, responded\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const activityLog = pgTable(\"activity_log\", {\n  id: serial(\"id\").primaryKey(),\n  type: text(\"type\").notNull(), // page_view, form_submission, login, etc.\n  description: text(\"description\").notNull(),\n  metadata: json(\"metadata\"), // Additional data like user agent, IP, etc.\n  userId: integer(\"user_id\"),\n  sessionId: text(\"session_id\"),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const analytics = pgTable(\"analytics\", {\n  id: serial(\"id\").primaryKey(),\n  date: text(\"date\").notNull(), // YYYY-MM-DD format\n  pageViews: integer(\"page_views\").default(0),\n  uniqueVisitors: integer(\"unique_visitors\").default(0),\n  conversions: integer(\"conversions\").default(0),\n  bounceRate: integer(\"bounce_rate\").default(0), // Percentage\n  avgSessionDuration: integer(\"avg_session_duration\").default(0), // Seconds\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  activityLogs: many(activityLog),\n}));\n\nexport const activityLogRelations = relations(activityLog, ({ one }) => ({\n  user: one(users, {\n    fields: [activityLog.userId],\n    references: [users.id],\n  }),\n}));\n\n// Schemas for validation\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  email: true,\n  role: true,\n});\n\nexport const insertContactSubmissionSchema = createInsertSchema(contactSubmissions).pick({\n  firstName: true,\n  lastName: true,\n  email: true,\n  company: true,\n  message: true,\n});\n\nexport const insertActivityLogSchema = createInsertSchema(activityLog).pick({\n  type: true,\n  description: true,\n  metadata: true,\n  userId: true,\n  sessionId: true,\n  ipAddress: true,\n  userAgent: true,\n});\n\nexport const loginSchema = z.object({\n  username: z.string().min(3),\n  password: z.string().min(6),\n  twoFactor: z.string().optional(),\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type ContactSubmission = typeof contactSubmissions.$inferSelect;\nexport type InsertContactSubmission = z.infer<typeof insertContactSubmissionSchema>;\nexport type ActivityLog = typeof activityLog.$inferSelect;\nexport type InsertActivityLog = z.infer<typeof insertActivityLogSchema>;\nexport type Analytics = typeof analytics.$inferSelect;\nexport type LoginRequest = z.infer<typeof loginSchema>;\n","size_bytes":3640},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\n\nimport Home from \"@/pages/home\";\nimport Suites from \"@/pages/suites\";\nimport AdminLogin from \"@/pages/admin-login\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/suites\" component={Suites} />\n      <Route path=\"/admin\" component={AdminLogin} />\n      <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-background text-foreground\">\n          <Router />\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1093},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Brand Colors */\n  --primary-base: hsl(248, 24%, 31%);\n  --primary-light: hsl(243, 39%, 59%);\n  --primary-gradient: hsl(270, 100%, 75%);\n  --accent: hsl(190, 100%, 67%);\n  --accent-secondary: hsl(244, 46%, 80%);\n  \n  /* High-Converting Colors */\n  --cta-orange: hsl(14, 100%, 60%);\n  --trust-blue: hsl(214, 100%, 40%);\n  --success: hsl(142, 71%, 45%);\n  \n  /* Neutrals */\n  --neutral-light: hsl(216, 33%, 97%);\n  --neutral: hsl(215, 16%, 47%);\n  --neutral-dark: hsl(217, 33%, 17%);\n\n  /* Shadcn Variables */\n  --background: hsl(216, 33%, 97%);\n  --foreground: hsl(248, 24%, 31%);\n  --muted: hsl(216, 20%, 95%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(248, 24%, 31%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(248, 24%, 31%);\n  --border: hsl(244, 46%, 80%);\n  --input: hsl(244, 46%, 80%);\n  --primary: hsl(190, 100%, 67%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(216, 20%, 95%);\n  --secondary-foreground: hsl(248, 24%, 31%);\n  --accent: hsl(216, 20%, 95%);\n  --accent-foreground: hsl(248, 24%, 31%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(248, 24%, 31%);\n  --radius: 0.75rem;\n  \n  /* Chart colors */\n  --chart-1: hsl(190, 100%, 67%);\n  --chart-2: hsl(243, 39%, 59%);\n  --chart-3: hsl(270, 100%, 75%);\n  --chart-4: hsl(14, 100%, 60%);\n  --chart-5: hsl(142, 71%, 45%);\n}\n\n.dark {\n  --background: hsl(217, 33%, 17%);\n  --foreground: hsl(216, 33%, 97%);\n  --muted: hsl(217, 33%, 25%);\n  --muted-foreground: hsl(215, 16%, 57%);\n  --popover: hsl(217, 33%, 17%);\n  --popover-foreground: hsl(216, 33%, 97%);\n  --card: hsl(217, 33%, 17%);\n  --card-foreground: hsl(216, 33%, 97%);\n  --border: hsl(217, 33%, 25%);\n  --input: hsl(217, 33%, 25%);\n  --primary: hsl(190, 100%, 67%);\n  --primary-foreground: hsl(217, 33%, 17%);\n  --secondary: hsl(217, 33%, 25%);\n  --secondary-foreground: hsl(216, 33%, 97%);\n  --accent: hsl(217, 33%, 25%);\n  --accent-foreground: hsl(216, 33%, 97%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(216, 33%, 97%);\n  --ring: hsl(190, 100%, 67%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'IBM Plex Sans', sans-serif;\n  }\n\n  h1 {\n    @apply text-4xl sm:text-5xl lg:text-6xl font-bold leading-tight;\n  }\n\n  h2 {\n    @apply text-3xl sm:text-4xl font-bold;\n  }\n\n  h3 {\n    @apply text-2xl font-semibold;\n  }\n\n  h4 {\n    @apply text-xl font-medium;\n  }\n}\n\n@layer components {\n  .gradient-text {\n    background: linear-gradient(135deg, var(--primary-light), var(--primary-gradient));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .cta-gradient {\n    background: linear-gradient(135deg, var(--cta-orange), var(--accent));\n  }\n\n  .glass-nav {\n    background: rgba(248, 250, 252, 0.95);\n    backdrop-filter: blur(20px);\n    -webkit-backdrop-filter: blur(20px);\n  }\n\n  /* Text contrast utilities */\n  .text-contrast-dark {\n    @apply text-white;\n  }\n\n  .text-contrast-light {\n    @apply text-gray-900;\n  }\n\n  .icon-contrast-dark {\n    @apply text-white;\n  }\n\n  .icon-contrast-light {\n    @apply text-gray-900;\n  }\n\n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n\n  .animate-pulse-slow {\n    animation: pulse 4s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n\n  .card-hover {\n    transition: all 0.3s ease;\n  }\n\n  .card-hover:hover {\n    transform: translateY(-8px);\n    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n  }\n}\n\n@keyframes float {\n  0%, 100% { \n    transform: translateY(0px); \n  }\n  50% { \n    transform: translateY(-20px); \n  }\n}\n\n@keyframes slideUp {\n  from { \n    transform: translateY(100px); \n    opacity: 0; \n  }\n  to { \n    transform: translateY(0); \n    opacity: 1; \n  }\n}\n\n@keyframes fadeIn {\n  from { \n    opacity: 0; \n  }\n  to { \n    opacity: 1; \n  }\n}\n\n/* Smooth scrolling */\nhtml {\n  scroll-behavior: smooth;\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: var(--muted);\n}\n\n::-webkit-scrollbar-thumb {\n  background: var(--accent-secondary);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: var(--primary-light);\n}\n\n/* Loading skeleton */\n@keyframes shimmer {\n  0% {\n    background-position: -468px 0;\n  }\n  100% {\n    background-position: 468px 0;\n  }\n}\n\n.shimmer {\n  animation: shimmer 1.2s ease-in-out infinite;\n  background: linear-gradient(\n    90deg,\n    #f0f0f0 25%,\n    #e0e0e0 37%,\n    #f0f0f0 63%\n  );\n  background-size: 800px 104px;\n}\n\n/* Focus styles */\n.focus-ring {\n  @apply focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 focus-visible:ring-offset-background;\n}\n\n/* Toast positioning */\n.toast-container {\n  position: fixed;\n  bottom: 1.5rem;\n  right: 1.5rem;\n  z-index: 100;\n}\n\n/* Mobile optimizations */\n@media (max-width: 768px) {\n  .mobile-padding {\n    @apply px-4;\n  }\n\n  .mobile-text {\n    @apply text-sm;\n  }\n\n  .mobile-hidden {\n    @apply hidden;\n  }\n}\n\n/* Print styles */\n@media print {\n  .no-print {\n    display: none !important;\n  }\n}\n\n/* High contrast mode */\n@media (prefers-contrast: high) {\n  :root {\n    --border: hsl(0, 0%, 0%);\n    --ring: hsl(0, 0%, 0%);\n  }\n}\n\n/* Reduced motion */\n@media (prefers-reduced-motion: reduce) {\n  *, *::before, *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n}\n","size_bytes":5731},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/auth-guard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { LoadingSpinner } from \"@/components/ui/loading-spinner\";\nimport { authService } from \"@/lib/auth\";\n\ninterface AuthGuardProps {\n  children: React.ReactNode;\n  requireAdmin?: boolean;\n}\n\nexport function AuthGuard({ children, requireAdmin = false }: AuthGuardProps) {\n  const [, setLocation] = useLocation();\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const token = authService.getToken();\n        \n        if (!token) {\n          setLocation(\"/admin\");\n          return;\n        }\n\n        // Verify token with server\n        const verification = await authService.verifyToken();\n        \n        if (!verification.valid) {\n          authService.logout();\n          setLocation(\"/admin\");\n          return;\n        }\n\n        if (requireAdmin && verification.user?.role !== \"admin\") {\n          setLocation(\"/admin\");\n          return;\n        }\n\n        setIsAuthenticated(true);\n      } catch (error) {\n        console.error(\"Authentication check failed:\", error);\n        authService.logout();\n        setLocation(\"/admin\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkAuth();\n  }, [setLocation, requireAdmin]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 via-accent/5 to-primary-gradient/5\">\n        <div className=\"text-center space-y-4\">\n          <LoadingSpinner size=\"lg\" />\n          <p className=\"text-neutral\">Verifying authentication...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return <>{children}</>;\n}","size_bytes":1827},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface User {\n  id: number;\n  username: string;\n  email: string;\n  role: string;\n}\n\nexport interface LoginResponse {\n  token: string;\n  user: User;\n  message: string;\n}\n\nexport interface LoginRequest {\n  username: string;\n  password: string;\n  twoFactor?: string;\n}\n\nclass AuthService {\n  private tokenKey = \"admin_token\";\n  private userKey = \"admin_user\";\n\n  async login(credentials: LoginRequest): Promise<LoginResponse> {\n    const response = await apiRequest(\"POST\", \"/api/admin/login\", credentials);\n    const data = await response.json();\n    \n    if (data.token && data.user) {\n      this.setToken(data.token);\n      this.setUser(data.user);\n    }\n    \n    return data;\n  }\n\n  logout(): void {\n    localStorage.removeItem(this.tokenKey);\n    localStorage.removeItem(this.userKey);\n    \n    // Clear any cached query data\n    window.location.href = \"/admin\";\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem(this.tokenKey);\n  }\n\n  setToken(token: string): void {\n    localStorage.setItem(this.tokenKey, token);\n  }\n\n  getUser(): User | null {\n    const userData = localStorage.getItem(this.userKey);\n    if (!userData) return null;\n    \n    try {\n      return JSON.parse(userData);\n    } catch (error) {\n      console.error(\"Failed to parse user data:\", error);\n      this.logout();\n      return null;\n    }\n  }\n\n  setUser(user: User): void {\n    localStorage.setItem(this.userKey, JSON.stringify(user));\n  }\n\n  isAuthenticated(): boolean {\n    const token = this.getToken();\n    const user = this.getUser();\n    return !!(token && user);\n  }\n\n  isAdmin(): boolean {\n    const user = this.getUser();\n    return user?.role === \"admin\";\n  }\n\n  async verifyToken(): Promise<{ valid: boolean; user?: User }> {\n    try {\n      const response = await apiRequest(\"GET\", \"/api/admin/verify\");\n      const data = await response.json();\n      \n      if (data.valid && data.user) {\n        this.setUser(data.user);\n        return { valid: true, user: data.user };\n      }\n      \n      return { valid: false };\n    } catch (error) {\n      console.error(\"Token verification failed:\", error);\n      this.logout();\n      return { valid: false };\n    }\n  }\n\n  getAuthHeaders(): Record<string, string> {\n    const token = this.getToken();\n    if (!token) return {};\n    \n    return {\n      Authorization: `Bearer ${token}`,\n    };\n  }\n\n  // Helper method to check if token is expired (basic check)\n  isTokenExpired(): boolean {\n    const token = this.getToken();\n    if (!token) return true;\n\n    try {\n      // Decode JWT payload (basic decode without verification)\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const currentTime = Math.floor(Date.now() / 1000);\n      \n      return payload.exp < currentTime;\n    } catch (error) {\n      console.error(\"Failed to decode token:\", error);\n      return true;\n    }\n  }\n\n  // Auto-refresh token before expiration (if needed)\n  async refreshTokenIfNeeded(): Promise<boolean> {\n    if (this.isTokenExpired()) {\n      this.logout();\n      return false;\n    }\n    \n    // If token expires within 5 minutes, verify it\n    try {\n      const token = this.getToken();\n      if (!token) return false;\n      \n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const currentTime = Math.floor(Date.now() / 1000);\n      const fiveMinutes = 5 * 60;\n      \n      if (payload.exp - currentTime < fiveMinutes) {\n        const verification = await this.verifyToken();\n        return verification.valid;\n      }\n      \n      return true;\n    } catch (error) {\n      console.error(\"Token refresh check failed:\", error);\n      return false;\n    }\n  }\n}\n\nexport const authService = new AuthService();\n\n// Export convenience functions\nexport const login = (credentials: LoginRequest) => authService.login(credentials);\nexport const logout = () => authService.logout();\nexport const getToken = () => authService.getToken();\nexport const getUser = () => authService.getUser();\nexport const isAuthenticated = () => authService.isAuthenticated();\nexport const isAdmin = () => authService.isAdmin();\nexport const verifyToken = () => authService.verifyToken();\nexport const getAuthHeaders = () => authService.getAuthHeaders();\n\n// Hook for React components to use authentication\nexport const useAuth = () => {\n  return {\n    user: getUser(),\n    token: getToken(),\n    isAuthenticated: isAuthenticated(),\n    isAdmin: isAdmin(),\n    login,\n    logout,\n    verifyToken,\n  };\n};\n","size_bytes":4494},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const headers: Record<string, string> = data ? { \"Content-Type\": \"application/json\" } : {};\n  \n  // Add authentication header if token exists\n  const token = localStorage.getItem(\"admin_token\");\n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  // Handle authentication errors\n  if (res.status === 401 || res.status === 403) {\n    localStorage.removeItem(\"admin_token\");\n    localStorage.removeItem(\"admin_user\");\n    if (window.location.pathname !== \"/admin\") {\n      window.location.href = \"/admin\";\n    }\n  }\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const headers: Record<string, string> = {};\n    \n    // Add authentication header if token exists\n    const token = localStorage.getItem(\"admin_token\");\n    if (token) {\n      headers.Authorization = `Bearer ${token}`;\n    }\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    // Handle authentication errors\n    if (res.status === 401 || res.status === 403) {\n      localStorage.removeItem(\"admin_token\");\n      localStorage.removeItem(\"admin_user\");\n      if (window.location.pathname !== \"/admin\") {\n        window.location.href = \"/admin\";\n      }\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2396},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { motion } from \"framer-motion\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { \n  Users, \n  TrendingUp, \n  DollarSign, \n  Activity, \n  LogOut, \n  Mail,\n  Calendar,\n  Shield,\n  BarChart3,\n  PieChart,\n  Zap\n} from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getQueryFn, apiRequest } from \"@/lib/queryClient\";\nimport { AuthGuard } from \"@/components/auth-guard\";\nimport { authService } from \"@/lib/auth\";\nimport type { AnalyticsData } from \"@/types/analytics\";\n\nexport default function AdminDashboard() {\n  const { toast } = useToast();\n  const user = authService.getUser();\n\n  // Fetch analytics data\n  const { data: analytics, isLoading, error } = useQuery({\n    queryKey: [\"/api/admin/analytics\"],\n    queryFn: getQueryFn({ on401: \"throw\" }),\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  const handleLogout = () => {\n    authService.logout();\n    toast({\n      title: \"Logged Out\",\n      description: \"You have been successfully logged out.\",\n    });\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle className=\"text-destructive\">Error Loading Dashboard</CardTitle>\n            <CardDescription>\n              Failed to load analytics data. Please check your connection and try again.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button onClick={() => setLocation(\"/admin\")} variant=\"outline\" className=\"w-full\">\n              Back to Login\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const stats: AnalyticsData = analytics || {\n    visitors: 0,\n    conversions: 0,\n    revenue: 0,\n    activeUsers: 0,\n    recentActivity: []\n  };\n\n  return (\n    <AuthGuard requireAdmin={true}>\n      <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.5 }}\n      className=\"min-h-screen bg-background\"\n    >\n      {/* Header */}\n      <header className=\"border-b border-border bg-card\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-primary-light to-accent rounded-lg flex items-center justify-center\">\n                <Zap className=\"w-5 h-5 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-foreground\">Synexian Labs</h1>\n                <p className=\"text-sm text-muted-foreground\">Analytics Dashboard</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"text-right\">\n                <p className=\"text-sm font-medium text-foreground\">{user.username}</p>\n                <p className=\"text-xs text-muted-foreground\">{user.role}</p>\n              </div>\n              <Button\n                onClick={handleLogout}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"flex items-center space-x-2\"\n              >\n                <LogOut className=\"w-4 h-4\" />\n                <span>Logout</span>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Welcome Message */}\n        <motion.div\n          initial={{ y: 20, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          transition={{ delay: 0.1 }}\n          className=\"mb-8\"\n        >\n          <h2 className=\"text-3xl font-bold text-foreground mb-2\">\n            Welcome back, {user.username}!\n          </h2>\n          <p className=\"text-muted-foreground\">\n            Here's what's happening with your business today.\n          </p>\n        </motion.div>\n\n        {/* Stats Cards */}\n        <motion.div\n          initial={{ y: 20, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          transition={{ delay: 0.2 }}\n          className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\"\n        >\n          <Card className=\"card-hover\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Visitors</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-foreground\">\n                {isLoading ? (\n                  <div className=\"w-16 h-6 bg-muted animate-pulse rounded\" />\n                ) : (\n                  stats.visitors.toLocaleString()\n                )}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                <span className=\"text-green-600\">+12%</span> from last month\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"card-hover\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Conversions</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-foreground\">\n                {isLoading ? (\n                  <div className=\"w-16 h-6 bg-muted animate-pulse rounded\" />\n                ) : (\n                  stats.conversions.toLocaleString()\n                )}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                <span className=\"text-green-600\">+8%</span> from last month\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"card-hover\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Revenue</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-foreground\">\n                {isLoading ? (\n                  <div className=\"w-20 h-6 bg-muted animate-pulse rounded\" />\n                ) : (\n                  `$${stats.revenue.toLocaleString()}`\n                )}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                <span className=\"text-green-600\">+15%</span> from last month\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"card-hover\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Active Users</CardTitle>\n              <Activity className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-foreground\">\n                {isLoading ? (\n                  <div className=\"w-16 h-6 bg-muted animate-pulse rounded\" />\n                ) : (\n                  stats.activeUsers.toLocaleString()\n                )}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                <span className=\"text-green-600\">+5%</span> from last month\n              </p>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Charts and Activity */}\n        <div className=\"grid lg:grid-cols-2 gap-6 mb-8\">\n          {/* Traffic Chart Placeholder */}\n          <motion.div\n            initial={{ y: 20, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            transition={{ delay: 0.3 }}\n          >\n            <Card className=\"card-hover\">\n              <CardHeader>\n                <div className=\"flex items-center space-x-2\">\n                  <BarChart3 className=\"w-5 h-5 text-primary\" />\n                  <CardTitle>Traffic Overview</CardTitle>\n                </div>\n                <CardDescription>Daily website traffic for the past 30 days</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-64 bg-gradient-to-b from-accent/10 to-transparent rounded-lg flex items-center justify-center\">\n                  <div className=\"text-center\">\n                    <PieChart className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-sm text-muted-foreground\">\n                      Chart visualization would be implemented here\n                    </p>\n                    <p className=\"text-xs text-muted-foreground mt-2\">\n                      Integration with Chart.js or Recharts\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          {/* Recent Activity */}\n          <motion.div\n            initial={{ y: 20, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            transition={{ delay: 0.4 }}\n          >\n            <Card className=\"card-hover\">\n              <CardHeader>\n                <div className=\"flex items-center space-x-2\">\n                  <Activity className=\"w-5 h-5 text-primary\" />\n                  <CardTitle>Recent Activity</CardTitle>\n                </div>\n                <CardDescription>Latest user interactions and system events</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ScrollArea className=\"h-64\">\n                  <div className=\"space-y-4\">\n                    {isLoading ? (\n                      // Loading skeleton\n                      Array.from({ length: 5 }).map((_, i) => (\n                        <div key={i} className=\"flex items-center space-x-4 p-3 bg-muted/50 rounded-lg\">\n                          <div className=\"w-8 h-8 bg-muted animate-pulse rounded-full\" />\n                          <div className=\"flex-1 space-y-2\">\n                            <div className=\"w-32 h-4 bg-muted animate-pulse rounded\" />\n                            <div className=\"w-24 h-3 bg-muted animate-pulse rounded\" />\n                          </div>\n                        </div>\n                      ))\n                    ) : stats.recentActivity.length > 0 ? (\n                      stats.recentActivity.map((activity: any) => (\n                        <div key={activity.id} className=\"flex items-center space-x-4 p-3 bg-muted/50 rounded-lg\">\n                          <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                            {activity.type === 'contact_form_submission' && <Mail className=\"w-4 h-4 text-white\" />}\n                            {activity.type === 'page_view' && <Activity className=\"w-4 h-4 text-white\" />}\n                            {activity.type === 'successful_login' && <Shield className=\"w-4 h-4 text-white\" />}\n                            {!['contact_form_submission', 'page_view', 'successful_login'].includes(activity.type) && <Users className=\"w-4 h-4 text-white\" />}\n                          </div>\n                          <div className=\"flex-1\">\n                            <p className=\"text-sm font-medium text-foreground\">{activity.description}</p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {new Date(activity.createdAt).toLocaleString()}\n                            </p>\n                          </div>\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {activity.type.replace('_', ' ')}\n                          </Badge>\n                        </div>\n                      ))\n                    ) : (\n                      <div className=\"text-center py-12\">\n                        <Activity className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                        <p className=\"text-muted-foreground\">No recent activity</p>\n                      </div>\n                    )}\n                  </div>\n                </ScrollArea>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n\n        {/* System Status */}\n        <motion.div\n          initial={{ y: 20, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          transition={{ delay: 0.5 }}\n        >\n          <Card className=\"card-hover\">\n            <CardHeader>\n              <div className=\"flex items-center space-x-2\">\n                <Shield className=\"w-5 h-5 text-primary\" />\n                <CardTitle>System Status</CardTitle>\n              </div>\n              <CardDescription>Current system health and security status</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-foreground\">Database</p>\n                    <p className=\"text-xs text-muted-foreground\">Operational</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-foreground\">API Services</p>\n                    <p className=\"text-xs text-muted-foreground\">Healthy</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-foreground\">Security</p>\n                    <p className=\"text-xs text-muted-foreground\">Protected</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </main>\n    </motion.div>\n    </AuthGuard>\n  );\n}\n","size_bytes":14908},"client/src/pages/admin-login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { motion } from \"framer-motion\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Zap, User, Lock, Shield, LogIn, Eye, EyeOff } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst loginSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  twoFactor: z.string().optional(),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function AdminLogin() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [loginError, setLoginError] = useState<string | null>(null);\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      twoFactor: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginForm) => {\n    setIsLoading(true);\n    setLoginError(null);\n\n    try {\n      const response = await apiRequest(\"POST\", \"/api/admin/login\", data);\n      const result = await response.json();\n\n      if (result.token) {\n        localStorage.setItem(\"admin_token\", result.token);\n        localStorage.setItem(\"admin_user\", JSON.stringify(result.user));\n        \n        toast({\n          title: \"Login Successful\",\n          description: \"Welcome to the admin dashboard!\",\n        });\n\n        setLocation(\"/admin/dashboard\");\n      }\n    } catch (error: any) {\n      const errorMessage = error.message || \"Login failed. Please try again.\";\n      setLoginError(errorMessage);\n      \n      toast({\n        title: \"Login Failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 via-accent/5 to-primary-gradient/5 p-4\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className=\"w-full max-w-md\"\n      >\n        <Card className=\"shadow-2xl border-accent-secondary/20\">\n          <CardHeader className=\"text-center space-y-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.2, type: \"spring\", stiffness: 200 }}\n              className=\"mx-auto w-16 h-16 bg-gradient-to-r from-primary-light to-accent rounded-xl flex items-center justify-center\"\n            >\n              <Zap className=\"w-8 h-8 text-white\" />\n            </motion.div>\n            \n            <div>\n              <CardTitle className=\"text-2xl font-bold text-primary\">Admin Access</CardTitle>\n              <CardDescription className=\"text-neutral\">\n                Secure access to Synexian Labs dashboard\n              </CardDescription>\n            </div>\n\n            <div className=\"flex items-center justify-center space-x-2 text-sm text-trust-blue bg-trust-blue/5 px-4 py-2 rounded-lg border border-trust-blue/20\">\n              <Shield className=\"w-4 h-4\" />\n              <span>256-bit encryption enabled</span>\n            </div>\n          </CardHeader>\n\n          <CardContent>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              {loginError && (\n                <Alert variant=\"destructive\">\n                  <AlertDescription>{loginError}</AlertDescription>\n                </Alert>\n              )}\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\" className=\"flex items-center space-x-2\">\n                  <User className=\"w-4 h-4\" />\n                  <span>Username</span>\n                </Label>\n                <Input\n                  id=\"username\"\n                  {...form.register(\"username\")}\n                  className=\"focus:ring-trust-blue focus:border-trust-blue\"\n                  placeholder=\"Enter your username\"\n                />\n                {form.formState.errors.username && (\n                  <p className=\"text-sm text-destructive\">\n                    {form.formState.errors.username.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"flex items-center space-x-2\">\n                  <Lock className=\"w-4 h-4\" />\n                  <span>Password</span>\n                </Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    {...form.register(\"password\")}\n                    className=\"focus:ring-trust-blue focus:border-trust-blue pr-10\"\n                    placeholder=\"Enter your password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </Button>\n                </div>\n                {form.formState.errors.password && (\n                  <p className=\"text-sm text-destructive\">\n                    {form.formState.errors.password.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"twoFactor\" className=\"flex items-center space-x-2\">\n                  <Shield className=\"w-4 h-4\" />\n                  <span>2FA Code (Optional)</span>\n                </Label>\n                <Input\n                  id=\"twoFactor\"\n                  {...form.register(\"twoFactor\")}\n                  className=\"focus:ring-trust-blue focus:border-trust-blue\"\n                  placeholder=\"Enter 6-digit code (use 123456 for demo)\"\n                  maxLength={6}\n                />\n                <p className=\"text-xs text-neutral\">\n                  For demo purposes, use code: 123456\n                </p>\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-gradient-to-r from-trust-blue to-primary hover:scale-105 transition-all duration-200\"\n                disabled={isLoading}\n              >\n                {isLoading ? (\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                    <span>Signing in...</span>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center space-x-2\">\n                    <LogIn className=\"w-4 h-4\" />\n                    <span>Secure Login</span>\n                  </div>\n                )}\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-xs text-neutral\">\n                Demo credentials: admin / admin123!@#\n              </p>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 0.5 }}\n              className=\"mt-4 p-4 bg-gradient-to-r from-primary/5 to-accent/5 rounded-lg border border-accent-secondary/20\"\n            >\n              <div className=\"flex items-center justify-center space-x-2 text-sm text-primary\">\n                <Shield className=\"w-4 h-4\" />\n                <span>Protected by enterprise-grade security</span>\n              </div>\n            </motion.div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":8406},"client/src/pages/home.tsx":{"content":"import { useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Navigation } from \"@/components/layout/navigation\";\nimport { Footer } from \"@/components/layout/footer\";\nimport { Hero } from \"@/components/sections/hero\";\nimport { Services } from \"@/components/sections/services\";\nimport { Features } from \"@/components/sections/features\";\nimport { About } from \"@/components/sections/about\";\nimport { Contact } from \"@/components/sections/contact\";\nimport { CalendlyModal } from \"@/components/modals/calendly-modal\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Home() {\n  // Track page view\n  useEffect(() => {\n    const trackPageView = async () => {\n      try {\n        await apiRequest(\"POST\", \"/api/track/pageview\", { page: \"home\" });\n      } catch (error) {\n        console.error(\"Failed to track page view:\", error);\n      }\n    };\n\n    trackPageView();\n  }, []);\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.5 }}\n      className=\"min-h-screen\"\n    >\n      <Navigation />\n      \n      <main className=\"pt-16\">\n        <Hero />\n        <Services />\n        <Features />\n        <About />\n        <Contact />\n      </main>\n      \n      <Footer />\n      <CalendlyModal />\n    </motion.div>\n  );\n}\n","size_bytes":1324},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/suites.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useState, useRef } from \"react\";\nimport { \n  Zap, \n  ArrowRight, \n  ExternalLink, \n  Code, \n  Layers, \n  Smartphone, \n  Briefcase, \n  TrendingUp,\n  Shield,\n  Globe,\n  Users,\n  PieChart,\n  MessageSquare,\n  Calendar,\n  CreditCard\n} from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\n// Mock data for the suites - in production, this would come from an API\nconst suites = [\n  {\n    id: 1,\n    title: \"SmartFlow Analytics\",\n    description: \"Advanced business intelligence platform with real-time data visualization and predictive analytics.\",\n    category: \"Analytics\",\n    image: \"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop&crop=center\",\n    tags: [\"Analytics\", \"BI\", \"Real-time\"],\n    features: [\"Real-time dashboards\", \"Predictive modeling\", \"Custom reports\"],\n    status: \"Live\",\n    url: \"https://analytics.synexianlabs.com\",\n    icon: PieChart,\n    color: \"from-blue-600 to-indigo-600\"\n  },\n  {\n    id: 2,\n    title: \"AutoCRM Pro\",\n    description: \"AI-powered customer relationship management system that automates lead scoring and follow-ups.\",\n    category: \"CRM\",\n    image: \"https://images.unsplash.com/photo-1559526324-4b87b5e36e44?w=600&h=400&fit=crop&crop=center\",\n    tags: [\"CRM\", \"AI\", \"Automation\"],\n    features: [\"AI lead scoring\", \"Automated workflows\", \"360° customer view\"],\n    status: \"Live\",\n    url: \"https://crm.synexianlabs.com\",\n    icon: Users,\n    color: \"from-green-600 to-emerald-600\"\n  },\n  {\n    id: 3,\n    title: \"SecureVault\",\n    description: \"Enterprise-grade security platform with zero-trust architecture and compliance automation.\",\n    category: \"Security\",\n    image: \"https://images.unsplash.com/photo-1563013544-824ae1b704d3?w=600&h=400&fit=crop&crop=center\",\n    tags: [\"Security\", \"Compliance\", \"Zero-trust\"],\n    features: [\"Zero-trust security\", \"Compliance automation\", \"Threat detection\"],\n    status: \"Beta\",\n    url: \"https://security.synexianlabs.com\",\n    icon: Shield,\n    color: \"from-red-600 to-rose-600\"\n  },\n  {\n    id: 4,\n    title: \"CloudScale\",\n    description: \"Multi-cloud management platform that optimizes costs and performance across providers.\",\n    category: \"Cloud\",\n    image: \"https://images.unsplash.com/photo-1451187580459-43490279c0fa?w=600&h=400&fit=crop&crop=center\",\n    tags: [\"Cloud\", \"Multi-cloud\", \"Cost optimization\"],\n    features: [\"Multi-cloud support\", \"Cost optimization\", \"Performance monitoring\"],\n    status: \"Coming Soon\",\n    url: \"#\",\n    icon: Globe,\n    color: \"from-purple-600 to-violet-600\"\n  },\n  {\n    id: 5,\n    title: \"ChatBot Studio\",\n    description: \"No-code conversational AI platform for building sophisticated chatbots and virtual assistants.\",\n    category: \"AI/ML\",\n    image: \"https://images.unsplash.com/photo-1531746790731-6c087fecd65a?w=600&h=400&fit=crop&crop=center\",\n    tags: [\"AI\", \"Chatbot\", \"No-code\"],\n    features: [\"No-code builder\", \"Multi-channel deployment\", \"Advanced NLP\"],\n    status: \"Live\",\n    url: \"https://chatbot.synexianlabs.com\",\n    icon: MessageSquare,\n    color: \"from-orange-600 to-amber-600\"\n  },\n  {\n    id: 6,\n    title: \"EconoMetrics\",\n    description: \"Financial planning and analysis platform with advanced forecasting and budget management.\",\n    category: \"Finance\",\n    image: \"https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3?w=600&h=400&fit=crop&crop=center\",\n    tags: [\"Finance\", \"Forecasting\", \"Budgeting\"],\n    features: [\"Financial forecasting\", \"Budget tracking\", \"ROI analysis\"],\n    status: \"Live\",\n    url: \"https://finance.synexianlabs.com\",\n    icon: TrendingUp,\n    color: \"from-teal-600 to-cyan-600\"\n  }\n];\n\nconst categories = [\"All\", \"Analytics\", \"CRM\", \"Security\", \"Cloud\", \"AI/ML\", \"Finance\"];\n\nexport default function Suites() {\n  const [selectedCategory, setSelectedCategory] = useState(\"All\");\n  const [hoveredCard, setHoveredCard] = useState<number | null>(null);\n  const constraintsRef = useRef(null);\n\n  const filteredSuites = selectedCategory === \"All\" \n    ? suites \n    : suites.filter(suite => suite.category === selectedCategory);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Live\": return \"bg-green-100 text-green-800\";\n      case \"Beta\": return \"bg-yellow-100 text-yellow-800\";\n      case \"Coming Soon\": return \"bg-gray-100 text-gray-800\";\n      default: return \"bg-blue-100 text-blue-800\";\n    }\n  };\n\n  const handleSuiteClick = (url: string) => {\n    if (url !== \"#\") {\n      window.open(url, \"_blank\", \"noopener,noreferrer\");\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50/50 to-indigo-50/50\">\n      {/* Hero Section */}\n      <section className=\"relative pt-20 pb-16 px-4\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            className=\"mb-8\"\n          >\n            <div className=\"inline-flex items-center space-x-2 bg-white/80 backdrop-blur-md rounded-full px-4 py-2 border border-blue-200/50 mb-6\">\n              <Layers className=\"w-4 h-4 text-blue-600\" />\n              <span className=\"text-sm font-medium text-blue-900\">Product Suites</span>\n            </div>\n            \n            <h1 className=\"text-5xl md:text-7xl font-bold mb-6 bg-gradient-to-r from-blue-900 via-purple-600 to-blue-900 bg-clip-text text-transparent\">\n              Synexian Suites\n            </h1>\n            \n            <p className=\"text-xl md:text-2xl text-gray-600 mb-8 max-w-4xl mx-auto leading-relaxed\">\n              Explore our comprehensive collection of AI-powered business solutions,\n              each designed to revolutionize how you work and scale your operations.\n            </p>\n          </motion.div>\n\n          {/* Category Filter */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n            className=\"flex flex-wrap justify-center gap-3 mb-12\"\n          >\n            {categories.map((category, index) => (\n              <motion.button\n                key={category}\n                initial={{ opacity: 0, scale: 0.9 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ delay: index * 0.1 }}\n                onClick={() => setSelectedCategory(category)}\n                className={`px-6 py-3 rounded-full font-medium transition-all duration-300 ${\n                  selectedCategory === category\n                    ? \"bg-blue-600 text-white shadow-lg shadow-blue-600/25\"\n                    : \"bg-white/80 text-gray-700 hover:bg-white hover:shadow-md\"\n                }`}\n              >\n                {category}\n              </motion.button>\n            ))}\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Suites Grid */}\n      <section className=\"px-4 pb-20\">\n        <div className=\"max-w-7xl mx-auto\">\n          <motion.div\n            layout\n            className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\"\n          >\n            {filteredSuites.map((suite, index) => {\n              const IconComponent = suite.icon;\n              return (\n                <motion.div\n                  key={suite.id}\n                  layout\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.5, delay: index * 0.1 }}\n                  whileHover={{ y: -8, scale: 1.02 }}\n                  onHoverStart={() => setHoveredCard(suite.id)}\n                  onHoverEnd={() => setHoveredCard(null)}\n                  className=\"group cursor-pointer\"\n                  onClick={() => handleSuiteClick(suite.url)}\n                >\n                  <Card className=\"h-full overflow-hidden border-0 shadow-xl shadow-gray-200/50 bg-white/90 backdrop-blur-md hover:shadow-2xl hover:shadow-gray-300/50 transition-all duration-500\">\n                    {/* Image Section */}\n                    <div className=\"relative overflow-hidden h-48\">\n                      <motion.img\n                        src={suite.image}\n                        alt={suite.title}\n                        className=\"w-full h-full object-cover transition-transform duration-700 group-hover:scale-110\"\n                      />\n                      <div className={`absolute inset-0 bg-gradient-to-t ${suite.color} opacity-80`} />\n                      \n                      {/* Status Badge */}\n                      <div className=\"absolute top-4 left-4\">\n                        <Badge className={getStatusColor(suite.status)}>\n                          {suite.status}\n                        </Badge>\n                      </div>\n\n                      {/* Icon */}\n                      <div className=\"absolute top-4 right-4\">\n                        <div className=\"w-12 h-12 bg-white/20 backdrop-blur-md rounded-full flex items-center justify-center\">\n                          <IconComponent className=\"w-6 h-6 text-white\" />\n                        </div>\n                      </div>\n\n                      {/* Hover Overlay */}\n                      <motion.div\n                        initial={{ opacity: 0 }}\n                        animate={{ opacity: hoveredCard === suite.id ? 1 : 0 }}\n                        className=\"absolute inset-0 bg-black/20 backdrop-blur-sm flex items-center justify-center\"\n                      >\n                        <div className=\"flex items-center space-x-2 text-white\">\n                          <ExternalLink className=\"w-5 h-5\" />\n                          <span className=\"font-medium\">View Application</span>\n                        </div>\n                      </motion.div>\n                    </div>\n\n                    <CardContent className=\"p-6\">\n                      <div className=\"mb-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h3 className=\"text-xl font-bold text-gray-900 group-hover:text-blue-600 transition-colors\">\n                            {suite.title}\n                          </h3>\n                          <ArrowRight className=\"w-5 h-5 text-gray-400 group-hover:text-blue-600 group-hover:translate-x-1 transition-all\" />\n                        </div>\n                        <p className=\"text-gray-600 text-sm leading-relaxed\">\n                          {suite.description}\n                        </p>\n                      </div>\n\n                      {/* Tags */}\n                      <div className=\"flex flex-wrap gap-2 mb-4\">\n                        {suite.tags.map((tag) => (\n                          <span\n                            key={tag}\n                            className=\"px-2 py-1 text-xs font-medium bg-gray-100 text-gray-600 rounded-full\"\n                          >\n                            {tag}\n                          </span>\n                        ))}\n                      </div>\n\n                      {/* Features */}\n                      <div className=\"space-y-2\">\n                        {suite.features.map((feature, idx) => (\n                          <div key={idx} className=\"flex items-center text-sm text-gray-600\">\n                            <div className=\"w-1.5 h-1.5 bg-blue-600 rounded-full mr-3 flex-shrink-0\" />\n                            <span>{feature}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              );\n            })}\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Call to Action */}\n      <section className=\"px-4 pb-20\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            className=\"bg-gradient-to-r from-blue-600 to-purple-600 rounded-3xl p-12 text-white\"\n          >\n            <Zap className=\"w-16 h-16 mx-auto mb-6\" />\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">\n              Ready to Transform Your Business?\n            </h2>\n            <p className=\"text-xl mb-8 opacity-90\">\n              Discover how our AI-powered suites can revolutionize your operations and drive unprecedented growth.\n            </p>\n            <Button\n              size=\"lg\"\n              className=\"bg-white text-blue-600 hover:bg-gray-100 font-semibold px-8 py-4 text-lg\"\n            >\n              Contact Our Team\n              <ArrowRight className=\"w-5 h-5 ml-2\" />\n            </Button>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Floating Elements */}\n      <div className=\"fixed inset-0 pointer-events-none overflow-hidden\">\n        {[...Array(6)].map((_, i) => (\n          <motion.div\n            key={i}\n            className=\"absolute w-2 h-2 bg-blue-400/30 rounded-full\"\n            style={{\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n            }}\n            animate={{\n              y: [0, -20, 0],\n              opacity: [0.3, 0.8, 0.3],\n            }}\n            transition={{\n              duration: 3 + Math.random() * 2,\n              repeat: Infinity,\n              delay: Math.random() * 2,\n            }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":13645},"client/src/types/analytics.ts":{"content":"export interface AnalyticsData {\n  visitors: number;\n  conversions: number;\n  revenue: number;\n  activeUsers: number;\n  recentActivity: ActivityLogItem[];\n}\n\nexport interface ActivityLogItem {\n  id: number;\n  type: string;\n  description: string;\n  createdAt: string;\n  userId?: number;\n  metadata?: Record<string, any>;\n}\n\nexport interface DashboardStats {\n  totalVisitors: number;\n  totalConversions: number;\n  totalRevenue: number;\n  activeUsers: number;\n  recentActivity: ActivityLogItem[];\n}\n\nexport interface ContactSubmission {\n  id: number;\n  firstName: string;\n  lastName: string;\n  email: string;\n  company?: string;\n  message: string;\n  status: \"new\" | \"read\" | \"responded\";\n  createdAt: string;\n}\n\nexport interface AnalyticsFilters {\n  startDate?: string;\n  endDate?: string;\n  limit?: number;\n}\n\nexport interface ChartDataPoint {\n  date: string;\n  value: number;\n  label?: string;\n}\n\nexport interface TrafficData {\n  daily: ChartDataPoint[];\n  weekly: ChartDataPoint[];\n  monthly: ChartDataPoint[];\n}\n\nexport interface ConversionData {\n  rate: number;\n  total: number;\n  bySource: {\n    source: string;\n    conversions: number;\n    rate: number;\n  }[];\n}\n\nexport interface RevenueData {\n  total: number;\n  monthly: ChartDataPoint[];\n  byService: {\n    service: string;\n    revenue: number;\n    percentage: number;\n  }[];\n}\n\nexport interface UserEngagement {\n  averageSessionDuration: number;\n  bounceRate: number;\n  pageViews: number;\n  uniqueVisitors: number;\n  returningVisitors: number;\n}\n\nexport interface SystemHealth {\n  database: {\n    status: \"healthy\" | \"warning\" | \"error\";\n    responseTime: number;\n    uptime: number;\n  };\n  api: {\n    status: \"healthy\" | \"warning\" | \"error\";\n    responseTime: number;\n    errorRate: number;\n  };\n  security: {\n    status: \"protected\" | \"warning\" | \"vulnerable\";\n    threatsBlocked: number;\n    lastScan: string;\n  };\n}\n\nexport interface PerformanceMetrics {\n  pageLoadTime: number;\n  serverResponseTime: number;\n  databaseQueryTime: number;\n  cacheHitRate: number;\n}\n\n// API Response Types\nexport interface AnalyticsApiResponse {\n  success: boolean;\n  data: AnalyticsData;\n  timestamp: string;\n}\n\nexport interface ContactsApiResponse {\n  success: boolean;\n  contacts: ContactSubmission[];\n  total: number;\n  page: number;\n  limit: number;\n}\n\n// Export types for easier importing\nexport type ActivityType = \n  | \"page_view\"\n  | \"contact_form_submission\"\n  | \"successful_login\"\n  | \"failed_login\"\n  | \"calendly_booking\"\n  | \"user_registration\"\n  | \"password_reset\"\n  | \"admin_action\"\n  | \"system_event\"\n  | \"security_alert\";\n\nexport type ContactStatus = \"new\" | \"read\" | \"responded\";\n\nexport type SystemStatus = \"healthy\" | \"warning\" | \"error\";\n\nexport type DateRange = \"today\" | \"yesterday\" | \"last7days\" | \"last30days\" | \"last90days\" | \"custom\";\n\n// Utility types\nexport type TimePeriod = \"hour\" | \"day\" | \"week\" | \"month\" | \"year\";\n\nexport interface DateRangeOption {\n  label: string;\n  value: DateRange;\n  startDate: Date;\n  endDate: Date;\n}\n\n// Form types\nexport interface AnalyticsFormData {\n  dateRange: DateRange;\n  startDate?: string;\n  endDate?: string;\n  metrics: string[];\n}\n\nexport interface ExportOptions {\n  format: \"csv\" | \"xlsx\" | \"pdf\";\n  dateRange: DateRange;\n  includeCharts: boolean;\n  metrics: string[];\n}\n","size_bytes":3285},"client/src/components/layout/footer.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Zap, Twitter, Linkedin, Github, Mail, Phone, MapPin } from \"lucide-react\";\n\nexport function Footer() {\n  const currentYear = new Date().getFullYear();\n\n  const footerSections = [\n    {\n      title: \"Services\",\n      links: [\n        { label: \"AI & Automation\", href: \"#services\" },\n        { label: \"MLOps\", href: \"#services\" },\n        { label: \"Strategic Consulting\", href: \"#services\" },\n        { label: \"Integration Services\", href: \"#services\" },\n      ],\n    },\n    {\n      title: \"Company\",\n      links: [\n        { label: \"About Us\", href: \"#about\" },\n        { label: \"Contact\", href: \"#contact\" },\n        { label: \"Careers\", href: \"#\" },\n        { label: \"Blog\", href: \"#\" },\n      ],\n    },\n    {\n      title: \"Resources\",\n      links: [\n        { label: \"Documentation\", href: \"#\" },\n        { label: \"Case Studies\", href: \"#\" },\n        { label: \"White Papers\", href: \"#\" },\n        { label: \"Support\", href: \"#\" },\n      ],\n    },\n  ];\n\n  const socialLinks = [\n    { icon: Twitter, href: \"#\", label: \"Twitter\" },\n    { icon: Linkedin, href: \"#\", label: \"LinkedIn\" },\n    { icon: Github, href: \"#\", label: \"GitHub\" },\n  ];\n\n  const scrollToSection = (sectionId: string) => {\n    const element = document.getElementById(sectionId.replace('#', ''));\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  return (\n    <footer className=\"bg-neutral-dark text-white relative overflow-hidden\">\n      {/* Background Pattern */}\n      <div className=\"absolute inset-0 opacity-5\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/10 via-accent/10 to-primary-gradient/10\" />\n        <div className=\"absolute top-0 left-0 w-full h-2 bg-gradient-to-r from-primary-light via-accent to-primary-gradient\" />\n      </div>\n\n      <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n        <div className=\"grid lg:grid-cols-2 gap-12 mb-12\">\n          {/* Brand Section */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            viewport={{ once: true }}\n            className=\"lg:col-span-1\"\n          >\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-primary-light to-accent rounded-lg flex items-center justify-center\">\n                <Zap className=\"w-5 h-5 text-white\" />\n              </div>\n              <span className=\"text-2xl font-bold\">Synexian Labs</span>\n            </div>\n            \n            <p className=\"text-gray-300 mb-8 max-w-md text-lg leading-relaxed\">\n              Transforming businesses through intelligent automation and AI-powered solutions. \n              Your trusted partner in digital transformation and innovation.\n            </p>\n\n            {/* Contact Info */}\n            <div className=\"space-y-4 mb-8\">\n              <div className=\"flex items-center space-x-3\">\n                <Mail className=\"w-5 h-5 text-accent\" />\n                <span className=\"text-gray-300\">hello@synexianlabs.com</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <Phone className=\"w-5 h-5 text-accent\" />\n                <span className=\"text-gray-300\">+1 (555) 123-4567</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <MapPin className=\"w-5 h-5 text-accent\" />\n                <span className=\"text-gray-300\">San Francisco, CA</span>\n              </div>\n            </div>\n\n            {/* Social Links */}\n            <div className=\"flex space-x-4\">\n              {socialLinks.map((social) => (\n                <motion.a\n                  key={social.label}\n                  href={social.href}\n                  whileHover={{ scale: 1.1, y: -2 }}\n                  whileTap={{ scale: 0.95 }}\n                  className=\"w-12 h-12 bg-white/10 backdrop-blur-sm rounded-lg flex items-center justify-center hover:bg-accent/20 transition-all duration-200\"\n                  aria-label={social.label}\n                >\n                  <social.icon className=\"w-5 h-5\" />\n                </motion.a>\n              ))}\n            </div>\n          </motion.div>\n\n          {/* Links Grid */}\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {footerSections.map((section, index) => (\n              <motion.div\n                key={section.title}\n                initial={{ opacity: 0, y: 20 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: 0.1 * (index + 1) }}\n                viewport={{ once: true }}\n              >\n                <h3 className=\"text-lg font-semibold mb-6 text-white\">{section.title}</h3>\n                <ul className=\"space-y-3\">\n                  {section.links.map((link) => (\n                    <li key={link.label}>\n                      <button\n                        onClick={() => scrollToSection(link.href)}\n                        className=\"text-gray-300 hover:text-accent transition-colors duration-200 text-left\"\n                      >\n                        {link.label}\n                      </button>\n                    </li>\n                  ))}\n                </ul>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n\n        {/* Bottom Bar */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          whileInView={{ opacity: 1 }}\n          transition={{ duration: 0.6, delay: 0.4 }}\n          viewport={{ once: true }}\n          className=\"border-t border-gray-700 pt-8 flex flex-col md:flex-row justify-between items-center\"\n        >\n          <div className=\"text-gray-400 text-sm mb-4 md:mb-0\">\n            © {currentYear} Synexian Labs Private Limited. All rights reserved.\n          </div>\n          \n          <div className=\"flex space-x-6 text-gray-400 text-sm\">\n            <button\n              onClick={() => scrollToSection(\"#\")}\n              className=\"hover:text-accent transition-colors duration-200\"\n            >\n              Privacy Policy\n            </button>\n            <button\n              onClick={() => scrollToSection(\"#\")}\n              className=\"hover:text-accent transition-colors duration-200\"\n            >\n              Terms of Service\n            </button>\n            <button\n              onClick={() => scrollToSection(\"#\")}\n              className=\"hover:text-accent transition-colors duration-200\"\n            >\n              Cookie Policy\n            </button>\n          </div>\n        </motion.div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":6681},"client/src/components/layout/navigation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Zap, Menu, X, ChevronDown } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\n\nexport function Navigation() {\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [location] = useLocation();\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 50);\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  const openCalendlyPopup = () => {\n    // This will be handled by the CalendlyModal component\n    const event = new CustomEvent('openCalendly');\n    window.dispatchEvent(event);\n  };\n\n  const scrollToSection = (sectionId: string) => {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\" });\n      setIsMobileMenuOpen(false);\n    }\n  };\n\n  const navItems = [\n    { id: \"home\", label: \"Home\", action: () => scrollToSection(\"home\") },\n    { \n      id: \"services\", \n      label: \"Services\", \n      action: () => scrollToSection(\"services\"),\n      dropdown: [\n        { label: \"AI & Automation\", action: () => scrollToSection(\"services\") },\n        { label: \"MLOps\", action: () => scrollToSection(\"services\") },\n        { label: \"Strategic Consulting\", action: () => scrollToSection(\"services\") },\n      ]\n    },\n    { id: \"suites\", label: \"Suites\", action: () => window.location.href = \"/suites\" },\n    { id: \"about\", label: \"About\", action: () => scrollToSection(\"about\") },\n    { id: \"contact\", label: \"Contact\", action: () => scrollToSection(\"contact\") },\n  ];\n\n  return (\n    <>\n      <motion.nav\n        initial={{ y: -100 }}\n        animate={{ y: 0 }}\n        className={`fixed top-0 w-full z-50 transition-all duration-300 ${\n          isScrolled \n            ? \"glass-nav shadow-lg border-b border-primary/20\" \n            : \"bg-background/95 backdrop-blur-sm\"\n        }`}\n      >\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            {/* Logo */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center space-x-3 cursor-pointer\"\n              onClick={() => scrollToSection(\"home\")}\n            >\n              <div className=\"w-8 h-8 bg-gradient-to-r from-primary-light to-accent rounded-lg flex items-center justify-center\">\n                <Zap className=\"w-5 h-5 text-white\" />\n              </div>\n              <span className=\"text-xl font-bold gradient-text\">Synexian Labs</span>\n            </motion.div>\n\n            {/* Desktop Navigation */}\n            <div className=\"hidden md:flex items-center space-x-8\">\n              {navItems.map((item) => (\n                <div key={item.id} className=\"relative group\">\n                  <button\n                    onClick={item.action}\n                    className=\"text-foreground hover:text-primary transition-colors duration-200 flex items-center space-x-1\"\n                  >\n                    <span>{item.label}</span>\n                    {item.dropdown && <ChevronDown className=\"w-4 h-4 group-hover:rotate-180 transition-transform duration-200\" />}\n                  </button>\n                  \n                  {item.dropdown && (\n                    <div className=\"absolute top-full left-0 mt-2 w-56 bg-card border border-border rounded-xl shadow-xl opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-10\">\n                      <div className=\"p-2\">\n                        {item.dropdown.map((dropdownItem) => (\n                          <button\n                            key={dropdownItem.label}\n                            onClick={dropdownItem.action}\n                            className=\"block w-full text-left px-4 py-3 text-foreground hover:bg-accent hover:text-accent-foreground rounded-lg transition-colors\"\n                          >\n                            {dropdownItem.label}\n                          </button>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n\n            {/* Admin Link & CTA Button */}\n            <div className=\"hidden md:flex items-center space-x-4\">\n              <button\n                onClick={() => window.open('/admin', '_blank')}\n                className=\"text-neutral hover:text-primary transition-colors duration-200 text-sm\"\n              >\n                Admin\n              </button>\n              <Button\n                onClick={openCalendlyPopup}\n                className=\"cta-gradient hover:scale-105 transition-all duration-200 focus-ring\"\n              >\n                Book a Call\n              </Button>\n            </div>\n\n            {/* Mobile Menu Button */}\n            <button\n              className=\"md:hidden p-2\"\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n            >\n              {isMobileMenuOpen ? (\n                <X className=\"w-6 h-6 text-foreground\" />\n              ) : (\n                <Menu className=\"w-6 h-6 text-foreground\" />\n              )}\n            </button>\n          </div>\n        </div>\n\n        {/* Mobile Menu */}\n        <AnimatePresence>\n          {isMobileMenuOpen && (\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: \"auto\" }}\n              exit={{ opacity: 0, height: 0 }}\n              className=\"md:hidden bg-card border-t border-border\"\n            >\n              <div className=\"px-4 py-6 space-y-4\">\n                {navItems.map((item) => (\n                  <div key={item.id}>\n                    <button\n                      onClick={item.action}\n                      className=\"block w-full text-left text-foreground hover:text-primary transition-colors py-2\"\n                    >\n                      {item.label}\n                    </button>\n                    {item.dropdown && (\n                      <div className=\"ml-4 mt-2 space-y-2\">\n                        {item.dropdown.map((dropdownItem) => (\n                          <button\n                            key={dropdownItem.label}\n                            onClick={dropdownItem.action}\n                            className=\"block w-full text-left text-muted-foreground hover:text-primary transition-colors py-1 text-sm\"\n                          >\n                            {dropdownItem.label}\n                          </button>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                ))}\n                \n                <div className=\"pt-4 border-t border-border space-y-3\">\n                  <button\n                    onClick={() => window.open('/admin', '_blank')}\n                    className=\"block text-neutral hover:text-primary transition-colors text-sm\"\n                  >\n                    Admin Portal\n                  </button>\n                  <Button\n                    onClick={openCalendlyPopup}\n                    className=\"w-full cta-gradient hover:scale-105 transition-all duration-200\"\n                  >\n                    Book a Call\n                  </Button>\n                </div>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </motion.nav>\n\n      {/* Progress Line Animation */}\n      <div className=\"fixed top-16 left-0 w-full h-0.5 bg-accent-secondary/20 z-40\">\n        <motion.div\n          className=\"h-full bg-gradient-to-r from-primary-light via-accent to-primary-gradient\"\n          style={{\n            scaleX: isScrolled ? 1 : 0,\n            transformOrigin: \"left\",\n          }}\n          transition={{ duration: 0.3 }}\n        />\n      </div>\n    </>\n  );\n}\n","size_bytes":8051},"client/src/components/modals/calendly-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { X, Calendar } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function CalendlyModal() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  useEffect(() => {\n    const handleOpenCalendly = () => {\n      setIsOpen(true);\n    };\n\n    window.addEventListener('openCalendly', handleOpenCalendly);\n\n    return () => {\n      window.removeEventListener('openCalendly', handleOpenCalendly);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isOpen) {\n      document.body.style.overflow = 'hidden';\n    } else {\n      document.body.style.overflow = 'unset';\n    }\n\n    return () => {\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpen]);\n\n  const closeModal = () => {\n    setIsOpen(false);\n  };\n\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        closeModal();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n    };\n  }, [isOpen]);\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\"\n          onClick={closeModal}\n        >\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95, y: 20 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: 0.95, y: 20 }}\n            transition={{ type: \"spring\", duration: 0.5 }}\n            className=\"bg-card rounded-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden shadow-2xl border border-border\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            {/* Header */}\n            <div className=\"flex justify-between items-center p-6 border-b border-border bg-gradient-to-r from-primary/5 to-accent/5\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-gradient-to-r from-primary-light to-accent rounded-lg flex items-center justify-center\">\n                  <Calendar className=\"w-5 h-5 text-white\" />\n                </div>\n                <div>\n                  <h2 className=\"text-xl font-bold text-foreground\">Schedule a Consultation</h2>\n                  <p className=\"text-sm text-muted-foreground\">Book your free 30-minute session</p>\n                </div>\n              </div>\n              \n              <Button\n                onClick={closeModal}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-muted-foreground hover:text-foreground transition-colors\"\n              >\n                <X className=\"w-5 h-5\" />\n              </Button>\n            </div>\n\n            {/* Calendly Widget */}\n            <div className=\"h-[600px] relative\">\n              <iframe\n                src=\"https://calendly.com/synexianlabs/30min?hide_event_type_details=1&hide_gdpr_banner=1&primary_color=5BEEFF\"\n                width=\"100%\"\n                height=\"100%\"\n                frameBorder=\"0\"\n                title=\"Schedule a consultation with Synexian Labs\"\n                style={{ minWidth: '320px' }}\n              />\n              \n              {/* Loading Overlay */}\n              <div className=\"absolute inset-0 bg-card flex items-center justify-center\">\n                <div className=\"text-center space-y-4\">\n                  <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto\" />\n                  <p className=\"text-muted-foreground\">Loading calendar...</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Footer */}\n            <div className=\"p-6 border-t border-border bg-muted/20\">\n              <div className=\"flex flex-col sm:flex-row items-center justify-between space-y-4 sm:space-y-0\">\n                <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-2 h-2 bg-success rounded-full\" />\n                    <span>Free consultation</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-2 h-2 bg-success rounded-full\" />\n                    <span>No commitment required</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-2 h-2 bg-success rounded-full\" />\n                    <span>Expert guidance</span>\n                  </div>\n                </div>\n                \n                <Button\n                  onClick={closeModal}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"text-muted-foreground hover:text-foreground\"\n                >\n                  Close\n                </Button>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}\n","size_bytes":5234},"client/src/components/sections/about.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Award, Target, Users, TrendingUp, Clock, Shield } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport function About() {\n  const stats = [\n    { value: \"50+\", label: \"Projects Delivered\", icon: Award },\n    { value: \"98%\", label: \"Client Satisfaction\", icon: Target },\n    { value: \"24/7\", label: \"Support Available\", icon: Clock },\n    { value: \"5+\", label: \"Years Experience\", icon: TrendingUp },\n  ];\n\n  const values = [\n    {\n      title: \"Innovation First\",\n      description: \"We stay at the forefront of AI and automation technology to deliver cutting-edge solutions.\",\n      icon: TrendingUp,\n    },\n    {\n      title: \"Client Success\",\n      description: \"Your success is our mission. We partner with you every step of the transformation journey.\",\n      icon: Target,\n    },\n    {\n      title: \"Security & Trust\",\n      description: \"Enterprise-grade security and transparent practices build lasting trust with our clients.\",\n      icon: Shield,\n    },\n  ];\n\n  return (\n    <section id=\"about\" className=\"py-20 bg-card\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          viewport={{ once: true }}\n          className=\"text-center mb-16\"\n        >\n          <Badge variant=\"secondary\" className=\"mb-4 px-4 py-2 text-sm bg-primary/10 text-primary border-primary/20\">\n            About Synexian Labs\n          </Badge>\n          <h2 className=\"text-3xl sm:text-4xl font-bold mb-4 text-foreground\">\n            Pioneering the Future of Business Automation\n          </h2>\n          <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto leading-relaxed\">\n            Founded by industry experts with decades of experience in AI, automation, and enterprise \n            technology solutions. We're on a mission to democratize advanced technology for businesses of all sizes.\n          </p>\n        </motion.div>\n\n        {/* Main Content Grid */}\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center mb-20\">\n          {/* Company Story */}\n          <motion.div\n            initial={{ opacity: 0, x: -30 }}\n            whileInView={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.8 }}\n            viewport={{ once: true }}\n            className=\"space-y-8\"\n          >\n            <div>\n              <h3 className=\"text-2xl font-semibold mb-6 text-foreground\">Our Mission</h3>\n              <p className=\"text-muted-foreground mb-6 leading-relaxed\">\n                We empower businesses to harness the full potential of artificial intelligence and automation \n                technologies. Our team of experts works closely with organizations to identify opportunities, \n                implement solutions, and drive measurable results.\n              </p>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                From startups to Fortune 500 companies, we've helped organizations across industries \n                transform their operations, reduce costs, and accelerate growth through intelligent automation.\n              </p>\n            </div>\n\n            {/* Values */}\n            <div className=\"space-y-4\">\n              <h4 className=\"text-lg font-semibold text-foreground mb-4\">Our Core Values</h4>\n              {values.map((value, index) => (\n                <motion.div\n                  key={value.title}\n                  initial={{ opacity: 0, x: -20 }}\n                  whileInView={{ opacity: 1, x: 0 }}\n                  transition={{ duration: 0.6, delay: index * 0.1 }}\n                  viewport={{ once: true }}\n                  className=\"flex items-start space-x-4 p-4 rounded-lg hover:bg-accent/5 transition-colors\"\n                >\n                  <div className=\"w-10 h-10 bg-gradient-to-r from-primary-light to-accent rounded-lg flex items-center justify-center flex-shrink-0\">\n                    <value.icon className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <div>\n                    <h5 className=\"font-semibold text-foreground mb-1\">{value.title}</h5>\n                    <p className=\"text-sm text-muted-foreground\">{value.description}</p>\n                  </div>\n                </motion.div>\n              ))}\n            </div>\n          </motion.div>\n\n          {/* Team Image & Stats */}\n          <motion.div\n            initial={{ opacity: 0, x: 30 }}\n            whileInView={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.8, delay: 0.2 }}\n            viewport={{ once: true }}\n            className=\"space-y-8\"\n          >\n            {/* Team Image */}\n            <div className=\"relative\">\n              <motion.div\n                whileHover={{ scale: 1.02 }}\n                transition={{ duration: 0.3 }}\n                className=\"relative overflow-hidden rounded-2xl shadow-2xl\"\n              >\n                <img\n                  src=\"https://images.unsplash.com/photo-1556761175-b413da4baf72?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n                  alt=\"Professional team discussing technology solutions in modern office environment\"\n                  className=\"w-full h-auto object-cover\"\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-primary/20 to-transparent\" />\n              </motion.div>\n\n              {/* Floating Badge */}\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: 0.6 }}\n                viewport={{ once: true }}\n                className=\"absolute -bottom-6 -left-6 bg-card border border-border rounded-xl p-4 shadow-xl\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <Users className=\"w-5 h-5 text-primary\" />\n                  <div>\n                    <div className=\"text-sm font-semibold text-foreground\">Expert Team</div>\n                    <div className=\"text-xs text-muted-foreground\">15+ AI Specialists</div>\n                  </div>\n                </div>\n              </motion.div>\n            </div>\n\n            {/* Stats Grid */}\n            <div className=\"grid grid-cols-2 gap-6\">\n              {stats.map((stat, index) => (\n                <motion.div\n                  key={stat.label}\n                  initial={{ opacity: 0, y: 20 }}\n                  whileInView={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.6, delay: 0.4 + index * 0.1 }}\n                  viewport={{ once: true }}\n                >\n                  <Card className=\"card-hover\">\n                    <CardContent className=\"p-6 text-center\">\n                      <div className=\"w-12 h-12 bg-gradient-to-r from-primary-light to-accent rounded-lg flex items-center justify-center mx-auto mb-4\">\n                        <stat.icon className=\"w-6 h-6 text-white\" />\n                      </div>\n                      <div className=\"text-3xl font-bold gradient-text mb-2\">\n                        {stat.value}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {stat.label}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              ))}\n            </div>\n          </motion.div>\n        </div>\n\n        {/* Timeline/Milestones */}\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          viewport={{ once: true }}\n          className=\"relative\"\n        >\n          <Card className=\"bg-gradient-to-r from-primary/5 via-accent/5 to-primary-gradient/5 border-accent-secondary/20\">\n            <CardContent className=\"p-12\">\n              <div className=\"text-center mb-8\">\n                <h3 className=\"text-2xl font-bold mb-4 text-foreground\">\n                  Our Journey in Numbers\n                </h3>\n                <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n                  From our founding to today, we've consistently delivered exceptional results \n                  and built lasting partnerships with our clients.\n                </p>\n              </div>\n\n              <div className=\"grid md:grid-cols-4 gap-8 text-center\">\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.5 }}\n                  whileInView={{ opacity: 1, scale: 1 }}\n                  transition={{ duration: 0.5, delay: 0.1 }}\n                  viewport={{ once: true }}\n                >\n                  <div className=\"text-4xl font-bold gradient-text mb-2\">2019</div>\n                  <div className=\"text-sm text-muted-foreground\">Company Founded</div>\n                </motion.div>\n                \n                <motion.div\n                  initial={{ opacity: 0, scale: 0.5 }}\n                  whileInView={{ opacity: 1, scale: 1 }}\n                  transition={{ duration: 0.5, delay: 0.2 }}\n                  viewport={{ once: true }}\n                >\n                  <div className=\"text-4xl font-bold gradient-text mb-2\">100+</div>\n                  <div className=\"text-sm text-muted-foreground\">Happy Clients</div>\n                </motion.div>\n                \n                <motion.div\n                  initial={{ opacity: 0, scale: 0.5 }}\n                  whileInView={{ opacity: 1, scale: 1 }}\n                  transition={{ duration: 0.5, delay: 0.3 }}\n                  viewport={{ once: true }}\n                >\n                  <div className=\"text-4xl font-bold gradient-text mb-2\">$5M+</div>\n                  <div className=\"text-sm text-muted-foreground\">Cost Savings Generated</div>\n                </motion.div>\n                \n                <motion.div\n                  initial={{ opacity: 0, scale: 0.5 }}\n                  whileInView={{ opacity: 1, scale: 1 }}\n                  transition={{ duration: 0.5, delay: 0.4 }}\n                  viewport={{ once: true }}\n                >\n                  <div className=\"text-4xl font-bold gradient-text mb-2\">15+</div>\n                  <div className=\"text-sm text-muted-foreground\">Industry Awards</div>\n                </motion.div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":10606},"client/src/components/sections/contact.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Mail, Phone, MapPin, Send, CheckCircle, Calendar, Clock } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst contactSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  company: z.string().optional(),\n  message: z.string().min(10, \"Message must be at least 10 characters\"),\n});\n\ntype ContactForm = z.infer<typeof contactSchema>;\n\nexport function Contact() {\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const form = useForm<ContactForm>({\n    resolver: zodResolver(contactSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      company: \"\",\n      message: \"\",\n    },\n  });\n\n  const onSubmit = async (data: ContactForm) => {\n    setIsSubmitting(true);\n\n    try {\n      await apiRequest(\"POST\", \"/api/contact\", data);\n      \n      toast({\n        title: \"Message Sent Successfully!\",\n        description: \"Thank you for your interest. We'll get back to you within 24 hours.\",\n      });\n\n      form.reset();\n    } catch (error: any) {\n      toast({\n        title: \"Failed to Send Message\",\n        description: error.message || \"Please try again later or contact us directly.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const openCalendlyPopup = () => {\n    const event = new CustomEvent('openCalendly');\n    window.dispatchEvent(event);\n  };\n\n  const contactInfo = [\n    {\n      icon: Mail,\n      title: \"Email\",\n      value: \"hello@synexianlabs.com\",\n      description: \"Send us an email anytime\",\n      gradient: \"from-primary-light to-accent\",\n    },\n    {\n      icon: Phone,\n      title: \"Phone\",\n      value: \"+1 (555) 123-4567\",\n      description: \"Mon-Fri from 8am to 6pm\",\n      gradient: \"from-accent to-primary-gradient\",\n    },\n    {\n      icon: MapPin,\n      title: \"Location\",\n      value: \"San Francisco, CA\",\n      description: \"Come say hello at our office\",\n      gradient: \"from-cta-orange to-accent\",\n    },\n  ];\n\n  return (\n    <section id=\"contact\" className=\"py-20 bg-gradient-to-br from-primary/5 via-accent/5 to-primary-gradient/5\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          viewport={{ once: true }}\n          className=\"text-center mb-16\"\n        >\n          <h2 className=\"text-3xl sm:text-4xl font-bold mb-4 text-foreground\">\n            Get In Touch\n          </h2>\n          <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto leading-relaxed\">\n            Ready to transform your business? Let's discuss how our AI and automation \n            solutions can drive your success. We're here to help you every step of the way.\n          </p>\n        </motion.div>\n\n        <div className=\"grid lg:grid-cols-2 gap-12\">\n          {/* Contact Form */}\n          <motion.div\n            initial={{ opacity: 0, x: -30 }}\n            whileInView={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.8 }}\n            viewport={{ once: true }}\n          >\n            <Card className=\"shadow-xl border-accent-secondary/20 backdrop-blur-sm bg-card/95\">\n              <CardHeader className=\"space-y-2\">\n                <CardTitle className=\"text-2xl font-semibold text-foreground flex items-center space-x-2\">\n                  <Send className=\"w-6 h-6 text-primary\" />\n                  <span>Send us a message</span>\n                </CardTitle>\n                <CardDescription className=\"text-muted-foreground\">\n                  Fill out the form below and we'll get back to you as soon as possible.\n                </CardDescription>\n              </CardHeader>\n              \n              <CardContent>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <div className=\"grid md:grid-cols-2 gap-6\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"firstName\" className=\"text-foreground font-medium\">\n                        First Name *\n                      </Label>\n                      <Input\n                        id=\"firstName\"\n                        {...form.register(\"firstName\")}\n                        className=\"focus:ring-accent focus:border-accent transition-all duration-200\"\n                        placeholder=\"Enter your first name\"\n                      />\n                      {form.formState.errors.firstName && (\n                        <p className=\"text-sm text-destructive\">\n                          {form.formState.errors.firstName.message}\n                        </p>\n                      )}\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"lastName\" className=\"text-foreground font-medium\">\n                        Last Name *\n                      </Label>\n                      <Input\n                        id=\"lastName\"\n                        {...form.register(\"lastName\")}\n                        className=\"focus:ring-accent focus:border-accent transition-all duration-200\"\n                        placeholder=\"Enter your last name\"\n                      />\n                      {form.formState.errors.lastName && (\n                        <p className=\"text-sm text-destructive\">\n                          {form.formState.errors.lastName.message}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\" className=\"text-foreground font-medium\">\n                      Email Address *\n                    </Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      {...form.register(\"email\")}\n                      className=\"focus:ring-accent focus:border-accent transition-all duration-200\"\n                      placeholder=\"Enter your email address\"\n                    />\n                    {form.formState.errors.email && (\n                      <p className=\"text-sm text-destructive\">\n                        {form.formState.errors.email.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"company\" className=\"text-foreground font-medium\">\n                      Company\n                    </Label>\n                    <Input\n                      id=\"company\"\n                      {...form.register(\"company\")}\n                      className=\"focus:ring-accent focus:border-accent transition-all duration-200\"\n                      placeholder=\"Enter your company name (optional)\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"message\" className=\"text-foreground font-medium\">\n                      Message *\n                    </Label>\n                    <Textarea\n                      id=\"message\"\n                      rows={4}\n                      {...form.register(\"message\")}\n                      className=\"focus:ring-accent focus:border-accent transition-all duration-200 resize-none\"\n                      placeholder=\"Tell us about your project, challenges, or questions...\"\n                    />\n                    {form.formState.errors.message && (\n                      <p className=\"text-sm text-destructive\">\n                        {form.formState.errors.message.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    className=\"w-full cta-gradient hover:scale-105 transition-all duration-200 focus-ring\"\n                    size=\"lg\"\n                  >\n                    {isSubmitting ? (\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                        <span>Sending Message...</span>\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center space-x-2\">\n                        <Send className=\"w-4 h-4\" />\n                        <span>Send Message</span>\n                      </div>\n                    )}\n                  </Button>\n\n                  <div className=\"flex items-center justify-center space-x-2 text-sm text-muted-foreground\">\n                    <CheckCircle className=\"w-4 h-4 text-success\" />\n                    <span>We respond within 24 hours</span>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          {/* Contact Info & CTA */}\n          <div className=\"space-y-8\">\n            {/* Contact Information */}\n            <motion.div\n              initial={{ opacity: 0, x: 30 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.8, delay: 0.2 }}\n              viewport={{ once: true }}\n            >\n              <Card className=\"shadow-xl border-accent-secondary/20 backdrop-blur-sm bg-card/95\">\n                <CardHeader>\n                  <CardTitle className=\"text-xl font-semibold text-foreground\">\n                    Contact Information\n                  </CardTitle>\n                  <CardDescription>\n                    Get in touch through any of these channels\n                  </CardDescription>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-6\">\n                  {contactInfo.map((info, index) => (\n                    <motion.div\n                      key={info.title}\n                      initial={{ opacity: 0, y: 20 }}\n                      whileInView={{ opacity: 1, y: 0 }}\n                      transition={{ duration: 0.6, delay: 0.4 + index * 0.1 }}\n                      viewport={{ once: true }}\n                      className=\"flex items-center space-x-4 p-4 rounded-lg hover:bg-accent/5 transition-colors\"\n                    >\n                      <div className={`w-12 h-12 bg-gradient-to-r ${info.gradient} rounded-lg flex items-center justify-center`}>\n                        <info.icon className=\"w-6 h-6 text-white\" />\n                      </div>\n                      <div>\n                        <div className=\"font-semibold text-foreground\">{info.title}</div>\n                        <div className=\"text-foreground font-medium\">{info.value}</div>\n                        <div className=\"text-sm text-muted-foreground\">{info.description}</div>\n                      </div>\n                    </motion.div>\n                  ))}\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            {/* Schedule Consultation CTA */}\n            <motion.div\n              initial={{ opacity: 0, x: 30 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.8, delay: 0.4 }}\n              viewport={{ once: true }}\n            >\n              <Card className=\"bg-gradient-to-br from-primary to-primary-gradient text-white shadow-xl border-0\">\n                <CardContent className=\"p-8 text-center\">\n                  <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-6\">\n                    <Calendar className=\"w-8 h-8 text-white\" />\n                  </div>\n                  \n                  <h3 className=\"text-2xl font-semibold mb-4\">\n                    Schedule a Free Consultation\n                  </h3>\n                  \n                  <p className=\"text-white/90 mb-6 leading-relaxed\">\n                    Book a free 30-minute consultation to discuss your business needs \n                    and explore how we can help you achieve your goals.\n                  </p>\n\n                  <div className=\"flex items-center justify-center space-x-4 text-sm text-white/80 mb-6\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Clock className=\"w-4 h-4\" />\n                      <span>30 minutes</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <CheckCircle className=\"w-4 h-4\" />\n                      <span>No commitment</span>\n                    </div>\n                  </div>\n\n                  <Button\n                    onClick={openCalendlyPopup}\n                    className=\"bg-white text-primary hover:bg-accent-secondary/20 hover:text-white transition-all duration-200 px-8 py-3 font-semibold\"\n                    size=\"lg\"\n                  >\n                    <Calendar className=\"mr-2 w-5 h-5\" />\n                    Book Now\n                  </Button>\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            {/* Quick Response Promise */}\n            <motion.div\n              initial={{ opacity: 0, x: 30 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.8, delay: 0.6 }}\n              viewport={{ once: true }}\n              className=\"bg-success/10 border border-success/20 rounded-xl p-6 text-center\"\n            >\n              <CheckCircle className=\"w-8 h-8 text-success mx-auto mb-3\" />\n              <h4 className=\"font-semibold text-foreground mb-2\">Quick Response Guarantee</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                We typically respond to all inquiries within 2-4 hours during business hours. \n                For urgent matters, please call us directly.\n              </p>\n            </motion.div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":14615},"client/src/components/sections/features.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { TrendingUp, Zap, Shield, Users, CheckCircle, Star } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport function Features() {\n  const features = [\n    {\n      title: \"AI-Powered Analytics\",\n      description: \"Transform raw data into actionable insights with our advanced AI engine. Get real-time predictions, trend analysis, and automated reporting that helps you make informed decisions faster than ever before.\",\n      image: \"https://images.unsplash.com/photo-1460925895917-afdab827c52f?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      alt: \"Business professionals analyzing data on multiple screens with AI-powered analytics\",\n      highlights: [\n        { icon: TrendingUp, title: \"Predictive Insights\", description: \"Forecast trends and outcomes with 95% accuracy\" },\n        { icon: Zap, title: \"Real-time Processing\", description: \"Instant analysis of streaming data sources\" },\n      ],\n      stats: [\n        { value: \"95%\", label: \"Accuracy\" },\n        { value: \"10x\", label: \"Faster\" },\n        { value: \"24/7\", label: \"Processing\" },\n      ]\n    },\n    {\n      title: \"Enterprise Security\",\n      description: \"Bank-grade encryption, SOC 2 compliance, and advanced threat protection. Your data stays secure with our multi-layered security architecture trusted by Fortune 500 companies.\",\n      image: \"https://images.unsplash.com/photo-1522202176988-66273c2fd55f?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      alt: \"Professional team collaborating on secure technology solutions in modern office\",\n      highlights: [\n        { icon: Shield, title: \"Advanced Protection\", description: \"Multi-layered security with threat detection\" },\n        { icon: CheckCircle, title: \"Compliance Ready\", description: \"SOC 2, GDPR, and industry standards\" },\n      ],\n      stats: [\n        { value: \"256-bit\", label: \"Encryption\" },\n        { value: \"SOC 2\", label: \"Compliant\" },\n        { value: \"24/7\", label: \"Monitoring\" },\n      ]\n    },\n    {\n      title: \"Seamless Integration\",\n      description: \"Connect with 1000+ popular tools and services. Our platform integrates effortlessly with your existing workflow, ensuring zero disruption to your current operations.\",\n      image: \"https://images.unsplash.com/photo-1518186233392-c232efbf2373?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      alt: \"Advanced automation and AI visualization dashboard showing seamless integrations\",\n      highlights: [\n        { icon: Users, title: \"Team Collaboration\", description: \"Built-in tools for seamless teamwork\" },\n        { icon: Zap, title: \"Quick Setup\", description: \"Deploy in minutes, not months\" },\n      ],\n      stats: [\n        { value: \"1000+\", label: \"Integrations\" },\n        { value: \"99.9%\", label: \"Uptime\" },\n        { value: \"5 min\", label: \"Setup\" },\n      ]\n    },\n  ];\n\n  return (\n    <section className=\"py-20 bg-background\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          viewport={{ once: true }}\n          className=\"text-center mb-16\"\n        >\n          <Badge variant=\"secondary\" className=\"mb-4 px-4 py-2 text-sm bg-accent/10 text-accent border-accent/20\">\n            Advanced Features\n          </Badge>\n          <h2 className=\"gradient-text mb-4\">\n            Built for Modern Enterprises\n          </h2>\n          <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n            Discover the powerful features that make our platform the preferred choice \n            for businesses looking to scale with AI and automation.\n          </p>\n        </motion.div>\n\n        {/* Features */}\n        <div className=\"space-y-20\">\n          {features.map((feature, index) => (\n            <motion.div\n              key={feature.title}\n              initial={{ opacity: 0, y: 50 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.2 }}\n              viewport={{ once: true }}\n              className={`grid lg:grid-cols-2 gap-12 items-center ${\n                index % 2 === 1 ? 'lg:grid-flow-col-dense' : ''\n              }`}\n            >\n              {/* Content */}\n              <div className={`space-y-8 ${index % 2 === 1 ? 'lg:col-start-2' : ''}`}>\n                <div>\n                  <h3 className=\"text-3xl font-bold mb-6 text-foreground\">\n                    {feature.title}\n                  </h3>\n                  <p className=\"text-lg text-muted-foreground leading-relaxed mb-8\">\n                    {feature.description}\n                  </p>\n                </div>\n\n                {/* Highlights */}\n                <div className=\"space-y-4\">\n                  {feature.highlights.map((highlight) => (\n                    <motion.div\n                      key={highlight.title}\n                      whileHover={{ x: 10 }}\n                      transition={{ type: \"spring\", stiffness: 300 }}\n                      className=\"flex items-start space-x-4 p-4 rounded-lg hover:bg-accent/5 transition-colors\"\n                    >\n                      <div className=\"w-10 h-10 bg-gradient-to-r from-primary-light to-accent rounded-lg flex items-center justify-center flex-shrink-0\">\n                        <highlight.icon className=\"w-5 h-5 text-white\" />\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold text-foreground mb-1\">\n                          {highlight.title}\n                        </h4>\n                        <p className=\"text-muted-foreground text-sm\">\n                          {highlight.description}\n                        </p>\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n\n                {/* Stats */}\n                <div className=\"flex flex-wrap gap-6 pt-4\">\n                  {feature.stats.map((stat, statIndex) => (\n                    <motion.div\n                      key={stat.label}\n                      initial={{ opacity: 0, scale: 0.5 }}\n                      whileInView={{ opacity: 1, scale: 1 }}\n                      transition={{ duration: 0.5, delay: 0.4 + statIndex * 0.1 }}\n                      viewport={{ once: true }}\n                      className=\"text-center\"\n                    >\n                      <div className=\"text-2xl font-bold gradient-text\">\n                        {stat.value}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {stat.label}\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Image */}\n              <motion.div\n                whileHover={{ scale: 1.02 }}\n                transition={{ duration: 0.3 }}\n                className={`relative ${index % 2 === 1 ? 'lg:col-start-1 lg:row-start-1' : ''}`}\n              >\n                <div className=\"relative overflow-hidden rounded-2xl shadow-2xl\">\n                  <img\n                    src={feature.image}\n                    alt={feature.alt}\n                    className=\"w-full h-auto object-cover\"\n                  />\n                  <div className=\"absolute inset-0 bg-gradient-to-t from-primary/10 to-transparent\" />\n                </div>\n\n                {/* Floating Badge */}\n                <motion.div\n                  initial={{ opacity: 0, y: 20 }}\n                  whileInView={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.6, delay: 0.6 }}\n                  viewport={{ once: true }}\n                  className=\"absolute -bottom-6 -right-6 bg-card border border-border rounded-xl p-4 shadow-xl\"\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <Star className=\"w-5 h-5 text-yellow-500 fill-current\" />\n                    <div>\n                      <div className=\"text-sm font-semibold text-foreground\">Enterprise Ready</div>\n                      <div className=\"text-xs text-muted-foreground\">Trusted by 500+ companies</div>\n                    </div>\n                  </div>\n                </motion.div>\n              </motion.div>\n            </motion.div>\n          ))}\n        </div>\n\n        {/* Bottom CTA */}\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          viewport={{ once: true }}\n          className=\"mt-20\"\n        >\n          <Card className=\"bg-gradient-to-r from-primary/5 via-accent/5 to-primary-gradient/5 border-accent-secondary/20\">\n            <CardContent className=\"p-12 text-center\">\n              <h3 className=\"text-2xl font-bold mb-4 text-foreground\">\n                Experience the Difference\n              </h3>\n              <p className=\"text-muted-foreground mb-8 max-w-2xl mx-auto\">\n                Join thousands of businesses that have transformed their operations with our \n                cutting-edge AI and automation solutions. See the impact in just 24 hours.\n              </p>\n              <div className=\"flex flex-wrap justify-center items-center gap-8 text-sm text-muted-foreground\">\n                <div className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"w-4 h-4 text-success\" />\n                  <span>Free 30-day trial</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"w-4 h-4 text-success\" />\n                  <span>No setup fees</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"w-4 h-4 text-success\" />\n                  <span>Cancel anytime</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":10171},"client/src/components/sections/hero.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { ArrowRight, Play, Sparkles } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function Hero() {\n  const scrollToContact = () => {\n    const element = document.getElementById(\"contact\");\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  const openCalendlyPopup = () => {\n    const event = new CustomEvent('openCalendly');\n    window.dispatchEvent(event);\n  };\n\n  return (\n    <section id=\"home\" className=\"relative overflow-hidden bg-gradient-to-br from-primary/5 via-accent/5 to-primary-gradient/5 pt-20 pb-32\">\n      {/* Background Effects */}\n      <div className=\"absolute inset-0\">\n        <div className=\"absolute top-1/4 left-1/4 w-96 h-96 bg-primary-light/20 rounded-full blur-3xl animate-pulse-slow\" />\n        <div className=\"absolute bottom-1/4 right-1/4 w-80 h-80 bg-accent/20 rounded-full blur-3xl animate-pulse-slow\" style={{ animationDelay: \"-2s\" }} />\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-72 h-72 bg-primary-gradient/20 rounded-full blur-3xl animate-pulse-slow\" style={{ animationDelay: \"-4s\" }} />\n      </div>\n\n      <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center min-h-[80vh]\">\n          {/* Content */}\n          <motion.div\n            initial={{ opacity: 0, x: -50 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-center lg:text-left\"\n          >\n            {/* Badge */}\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              className=\"inline-flex items-center space-x-2 bg-accent/10 border border-accent/20 rounded-full px-4 py-2 mb-6\"\n            >\n              <Sparkles className=\"w-4 h-4 text-accent\" />\n              <span className=\"text-sm font-medium text-foreground\">AI-Powered Business Solutions</span>\n            </motion.div>\n\n            {/* Headline */}\n            <motion.h1\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.3 }}\n              className=\"mb-6\"\n            >\n              <span className=\"gradient-text\">Transform</span> your business with{\" \"}\n              <span className=\"gradient-text\">AI & Automation</span>\n            </motion.h1>\n\n            {/* Subheading */}\n            <motion.p\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.4 }}\n              className=\"text-lg sm:text-xl text-muted-foreground mb-8 max-w-2xl leading-relaxed\"\n            >\n              Experience the power of cutting-edge AI solutions that revolutionize operations, \n              boost productivity, and drive unprecedented growth for modern businesses.\n            </motion.p>\n\n            {/* CTA Buttons */}\n            <motion.div\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.5 }}\n              className=\"flex flex-col sm:flex-row gap-4 justify-center lg:justify-start\"\n            >\n              <Button\n                onClick={scrollToContact}\n                size=\"lg\"\n                className=\"cta-gradient hover:scale-105 transition-all duration-200 text-lg px-8 py-4 focus-ring group\"\n              >\n                Get Started Today\n                <ArrowRight className=\"ml-2 w-5 h-5 group-hover:translate-x-1 transition-transform\" />\n              </Button>\n              \n              <Button\n                onClick={openCalendlyPopup}\n                variant=\"outline\"\n                size=\"lg\"\n                className=\"border-2 border-primary text-primary hover:bg-primary hover:text-white transition-all duration-200 text-lg px-8 py-4 focus-ring group\"\n              >\n                <Play className=\"mr-2 w-5 h-5 group-hover:scale-110 transition-transform\" />\n                Watch Demo\n              </Button>\n            </motion.div>\n\n            {/* Trust Indicators */}\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ duration: 0.8, delay: 0.6 }}\n              className=\"mt-12 flex flex-wrap items-center justify-center lg:justify-start gap-8 text-sm text-muted-foreground\"\n            >\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n                <span>SOC 2 Compliant</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n                <span>256-bit Encryption</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n                <span>24/7 Support</span>\n              </div>\n            </motion.div>\n          </motion.div>\n\n          {/* Hero Image */}\n          <motion.div\n            initial={{ opacity: 0, x: 50 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.8, delay: 0.2 }}\n            className=\"relative\"\n          >\n            <div className=\"relative z-10\">\n              <img\n                src=\"https://images.unsplash.com/photo-1497366216548-37526070297c?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n                alt=\"Modern tech office with collaborative workspace showcasing AI and automation solutions\"\n                className=\"rounded-2xl shadow-2xl w-full h-auto object-cover\"\n              />\n              <div className=\"absolute inset-0 bg-gradient-to-t from-primary/10 to-transparent rounded-2xl\" />\n            </div>\n\n            {/* Floating Elements */}\n            <motion.div\n              animate={{ y: [0, -20, 0] }}\n              transition={{ duration: 6, repeat: Infinity, ease: \"easeInOut\" }}\n              className=\"absolute -top-6 -right-6 w-20 h-20 bg-gradient-to-r from-accent to-primary-gradient rounded-full opacity-20\"\n            />\n            \n            <motion.div\n              animate={{ y: [0, -15, 0] }}\n              transition={{ duration: 4, repeat: Infinity, ease: \"easeInOut\", delay: -2 }}\n              className=\"absolute -bottom-4 -left-4 w-16 h-16 bg-gradient-to-r from-cta-orange to-accent rounded-full opacity-30\"\n            />\n\n            <motion.div\n              animate={{ y: [0, -25, 0] }}\n              transition={{ duration: 8, repeat: Infinity, ease: \"easeInOut\", delay: -4 }}\n              className=\"absolute top-1/2 -left-8 w-12 h-12 bg-gradient-to-r from-primary-light to-primary-gradient rounded-full opacity-25\"\n            />\n\n            {/* Stats Overlay */}\n            <motion.div\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.8, delay: 0.8 }}\n              className=\"absolute bottom-8 left-8 bg-card/95 backdrop-blur-sm rounded-xl p-4 shadow-xl border border-border\"\n            >\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-accent\">50+</div>\n                  <div className=\"text-xs text-muted-foreground\">Projects</div>\n                </div>\n                <div className=\"w-px h-8 bg-border\" />\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-success\">98%</div>\n                  <div className=\"text-xs text-muted-foreground\">Success</div>\n                </div>\n                <div className=\"w-px h-8 bg-border\" />\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-primary\">24/7</div>\n                  <div className=\"text-xs text-muted-foreground\">Support</div>\n                </div>\n              </div>\n            </motion.div>\n          </motion.div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":8329},"client/src/components/sections/services.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Cpu, Settings, Users, CheckCircle, ArrowRight } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function Services() {\n  const services = [\n    {\n      icon: Cpu,\n      title: \"AI & Automation\",\n      description: \"Transform workflows with intelligent automation, machine learning models, and AI-powered decision making systems.\",\n      features: [\n        \"Process Automation\",\n        \"Predictive Analytics\",\n        \"Custom AI Models\",\n        \"Natural Language Processing\"\n      ],\n      gradient: \"from-primary-light to-accent\",\n    },\n    {\n      icon: Settings,\n      title: \"MLOps\",\n      description: \"Streamline machine learning operations with robust pipelines, monitoring, and deployment solutions.\",\n      features: [\n        \"Model Deployment\",\n        \"Performance Monitoring\", \n        \"CI/CD Pipelines\",\n        \"Scalable Infrastructure\"\n      ],\n      gradient: \"from-accent to-primary-gradient\",\n    },\n    {\n      icon: Users,\n      title: \"Strategic Consulting\",\n      description: \"Expert guidance on digital transformation, technology strategy, and implementation roadmaps.\",\n      features: [\n        \"Digital Strategy\",\n        \"Technology Assessment\",\n        \"Implementation Support\",\n        \"Change Management\"\n      ],\n      gradient: \"from-cta-orange to-accent\",\n    },\n  ];\n\n  const scrollToContact = () => {\n    const element = document.getElementById(\"contact\");\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  return (\n    <section id=\"services\" className=\"py-20 bg-card\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          viewport={{ once: true }}\n          className=\"text-center mb-16\"\n        >\n          <h2 className=\"mb-4\">\n            <span className=\"gradient-text\">Powerful Solutions</span> for Modern Business\n          </h2>\n          <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto leading-relaxed\">\n            Comprehensive AI and automation services designed to streamline operations, \n            enhance productivity, and drive innovation across your organization.\n          </p>\n        </motion.div>\n\n        {/* Services Grid */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16\">\n          {services.map((service, index) => (\n            <motion.div\n              key={service.title}\n              initial={{ opacity: 0, y: 30 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: index * 0.2 }}\n              viewport={{ once: true }}\n            >\n              <Card className=\"group card-hover h-full border-accent-secondary/20 hover:border-accent/50\">\n                <CardHeader className=\"space-y-4\">\n                  <motion.div\n                    whileHover={{ scale: 1.1, rotate: 5 }}\n                    transition={{ type: \"spring\", stiffness: 400, damping: 10 }}\n                    className={`w-16 h-16 bg-gradient-to-r ${service.gradient} rounded-xl flex items-center justify-center`}\n                  >\n                    <service.icon className=\"w-8 h-8 text-white\" />\n                  </motion.div>\n                  \n                  <div>\n                    <CardTitle className=\"text-xl mb-2 group-hover:text-primary transition-colors\">\n                      {service.title}\n                    </CardTitle>\n                    <CardDescription className=\"text-base leading-relaxed\">\n                      {service.description}\n                    </CardDescription>\n                  </div>\n                </CardHeader>\n\n                <CardContent className=\"space-y-6\">\n                  {/* Features List */}\n                  <ul className=\"space-y-3\">\n                    {service.features.map((feature) => (\n                      <li key={feature} className=\"flex items-center space-x-3\">\n                        <CheckCircle className=\"w-4 h-4 text-success flex-shrink-0\" />\n                        <span className=\"text-sm text-muted-foreground\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n\n                  {/* Learn More Button */}\n                  <Button\n                    onClick={scrollToContact}\n                    variant=\"outline\"\n                    className=\"w-full group-hover:bg-primary group-hover:text-white group-hover:border-primary transition-all duration-200\"\n                  >\n                    Learn More\n                    <ArrowRight className=\"ml-2 w-4 h-4 group-hover:translate-x-1 transition-transform\" />\n                  </Button>\n                </CardContent>\n              </Card>\n            </motion.div>\n          ))}\n        </div>\n\n        {/* CTA Section */}\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.6 }}\n          viewport={{ once: true }}\n          className=\"text-center\"\n        >\n          <div className=\"bg-gradient-to-r from-primary/10 via-accent/10 to-primary-gradient/10 rounded-2xl p-8 border border-accent-secondary/20\">\n            <h3 className=\"text-2xl font-semibold mb-4 text-foreground\">\n              Ready to Transform Your Business?\n            </h3>\n            <p className=\"text-muted-foreground mb-6 max-w-2xl mx-auto\">\n              Discover how our AI and automation solutions can revolutionize your operations. \n              Schedule a consultation to explore the possibilities.\n            </p>\n            <Button\n              onClick={scrollToContact}\n              size=\"lg\"\n              className=\"cta-gradient hover:scale-105 transition-all duration-200 px-8 py-3\"\n            >\n              Schedule Consultation\n              <ArrowRight className=\"ml-2 w-5 h-5\" />\n            </Button>\n          </div>\n        </motion.div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6204},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/loading-spinner.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface LoadingSpinnerProps {\n  size?: \"sm\" | \"md\" | \"lg\";\n  className?: string;\n}\n\nexport function LoadingSpinner({ size = \"md\", className }: LoadingSpinnerProps) {\n  const sizeClasses = {\n    sm: \"w-4 h-4\",\n    md: \"w-8 h-8\",\n    lg: \"w-12 h-12\",\n  };\n\n  return (\n    <div\n      className={cn(\n        \"animate-spin rounded-full border-2 border-gray-300 border-t-primary\",\n        sizeClasses[size],\n        className\n      )}\n    />\n  );\n}","size_bytes":479},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}